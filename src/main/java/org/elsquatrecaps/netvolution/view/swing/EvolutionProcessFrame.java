package org.elsquatrecaps.netvolution.view.swing;

import org.elsquatrecaps.netvolution.persistence.NetvolutionDataFileManager;
import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.node.ArrayNode;
import java.awt.Color;
import java.io.File;
import java.io.PrintWriter;
import java.io.StringWriter;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.concurrent.TimeUnit;
import java.util.logging.Level;
import java.util.logging.Logger;
import org.elsquatrecaps.netvolution.constants.CntFrames;
import org.elsquatrecaps.netvolution.shareddata.NetvolutionSharedData;
import org.elsquatrecaps.netvolution.view.swing.backgroundtask.EvolutionaryEventSwingWorker;
import org.elsquatrecaps.rsjcb.netvolution.events.CompletedEvolutionaryProcessEvent;
import org.elsquatrecaps.rsjcb.netvolution.events.ErrorOnProcessEvolution;
import org.elsquatrecaps.rsjcb.netvolution.events.EvolutionaryEvent;
import org.elsquatrecaps.rsjcb.netvolution.events.FinishedEvolutionaryCycleEvent;
import org.elsquatrecaps.rsjcb.netvolution.events.InitialEvolutionaryProcessEvent;
import org.elsquatrecaps.rsjcb.netvolution.events.ProgenyLinesEvent;
import org.elsquatrecaps.rsjcb.netvolution.evolutiveprocess.calculators.SinglePropertyCalculatorItems;
import org.elsquatrecaps.rsjcb.netvolution.evolutiveprocess.optimization.OptimizationMethod;
import org.elsquatrecaps.rsjcb.netvolution.evolutiveprocess.optimization.OptimizeMethodItems;
import org.elsquatrecaps.rsjcb.netvolution.evolutiveprocess.optimization.SurviveOptimizationMethodValues;
import org.elsquatrecaps.rsjcb.netvolution.neuralnetwork.InputOutputContributionValues;
import org.elsquatrecaps.rsjcb.netvolution.neuralnetwork.NeuronTypesForStabilityCheckingValues;
import org.elsquatrecaps.rsjcb.netvolution.neuralnetwork.PtpNeuralNetworkConfiguration;
import org.elsquatrecaps.rsjcb.netvolution.neuralnetwork.actfunctions.ActivationFunction;
import org.jfree.chart.ChartFactory;
import org.jfree.chart.ChartPanel;
import org.jfree.chart.JFreeChart;
import org.jfree.chart.axis.ValueAxis;
import org.jfree.chart.plot.PlotOrientation;
import org.jfree.chart.plot.XYPlot;
import org.jfree.chart.ui.RectangleInsets;
import org.jfree.data.xy.XYSeries;
import org.jfree.data.xy.XYSeriesCollection;


/**
 *
 * @author josep
 */
public class EvolutionProcessFrame extends NetvolutionBasicFrame{
   private Map<String, XYSeries> sdev = new HashMap<>();
    private EvolutionaryEventSwingWorker worker;
//    private EvolutionaryEventSwingProcessor worker;
    private final List<String> propertiesToFollow=new ArrayList<>();
    private NetvolutionDataFileManager netvolutionDataFileManager;
    private boolean isDataSaved=false;
    private boolean isProcessRunning=false;
    private boolean forRunningProcess = false;
    
    
    
    
//    private int currentBufferPosition;
//    private FinishedEvolutionaryCycleEvent[] dataBuffer;
    private final int MaximumItemCount  = 4000;

    /**
     * Creates new form NetvolutionFrame
     * @param sharedData
     */
    public EvolutionProcessFrame(NetvolutionSharedData sharedData) {
        super(sharedData);
    }
    
//    public EvolutionProcessFrame(Map<String, JFrame> frames) {
//        menuEvents = new SystemMenuEvents(this);
//        this.frames = frames;        
//    }
    
//    public void setSeriesName(String key, String name){
//        seriesName.put(key, name);
//    }
    

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        buttonBarPanel = new javax.swing.JPanel();
        jToolBar1 = new javax.swing.JToolBar();
        viewCurrentConfigButton = new javax.swing.JButton();
        openConfigButton = new javax.swing.JButton();
        saveConfigButton = new javax.swing.JButton();
        runButton = new javax.swing.JButton();
        loadEvolveDataButton = new javax.swing.JButton();
        saveEvolveDataButton = new javax.swing.JButton();
        viewAgentDetailsButton = new javax.swing.JButton();
        loadAgentDetailsButton = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        jPanelGraph = new javax.swing.JPanel();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanel1 = new javax.swing.JPanel();
        processControlsPanel = new javax.swing.JPanel();
        finishProcessButton = new javax.swing.JButton();
        stopStarToggleButton = new javax.swing.JToggleButton();
        viewGraphCheckBox = new javax.swing.JCheckBox();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        viewTextCheckBox = new javax.swing.JCheckBox();
        jPanel3 = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        cicleNumberTextField = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        replacedAgentsTextField = new javax.swing.JTextField();
        jPanel5 = new javax.swing.JPanel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        performanceAverageTextField = new javax.swing.JTextField();
        performanceMaxTextField = new javax.swing.JTextField();
        performanceMinTextField = new javax.swing.JTextField();
        jPanel6 = new javax.swing.JPanel();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        infoLinearityDegreeTextField = new javax.swing.JTextField();
        infoCalculationEficiencyTextField = new javax.swing.JTextField();
        infoNeuronDensityTextField = new javax.swing.JTextField();
        jPanel7 = new javax.swing.JPanel();
        jLabel11 = new javax.swing.JLabel();
        minimumBestPerformanceValueLabel = new javax.swing.JTextField();
        jLabel12 = new javax.swing.JLabel();
        minimumAveragePerformaceValueLabel = new javax.swing.JTextField();
        jLabel13 = new javax.swing.JLabel();
        maximumEvolutionaryCyclesValueLabel = new javax.swing.JTextField();
        jPanel9 = new javax.swing.JPanel();
        jPanel10 = new javax.swing.JPanel();
        usePerformanceAsVitalAdvantgeCheck = new javax.swing.JCheckBox();
        useNeuronDensityAsVitalAdvantgeCheck = new javax.swing.JCheckBox();
        useCalculationEficiencyAsVitalAdvantgeCheck = new javax.swing.JCheckBox();
        jPanel11 = new javax.swing.JPanel();
        useNeuronDensityAsReproductiveAdvantgeCheck = new javax.swing.JCheckBox();
        useCalculationEficiencyAsReproductiveAdvantgeCheck = new javax.swing.JCheckBox();
        jPanel12 = new javax.swing.JPanel();
        jPanel13 = new javax.swing.JPanel();
        followPerformanceAdvantgeCheck = new javax.swing.JCheckBox();
        followCalculationEficiencyCheck = new javax.swing.JCheckBox();
        followAverageBetaValueCheck = new javax.swing.JCheckBox();
        followNeuronDensityAdvantgeCheck = new javax.swing.JCheckBox();
        jLabel15 = new javax.swing.JLabel();
        verificationProcessTypeTextField = new javax.swing.JTextField();
        jPanel14 = new javax.swing.JPanel();
        jPanel15 = new javax.swing.JPanel();
        jPanel21 = new javax.swing.JPanel();
        jLabel16 = new javax.swing.JLabel();
        populationSizeField = new javax.swing.JTextField();
        jLabel17 = new javax.swing.JLabel();
        inputSizeField = new javax.swing.JTextField();
        jLabel18 = new javax.swing.JLabel();
        outputSizeField = new javax.swing.JTextField();
        jLabel19 = new javax.swing.JLabel();
        inputReceiverNeuronsSizeField = new javax.swing.JTextField();
        jLabel20 = new javax.swing.JLabel();
        outputResponseNeuronsSizeField = new javax.swing.JTextField();
        hasIntermediateNeuronsCheck = new javax.swing.JCheckBox();
        initialNeuronSizeLabel = new javax.swing.JLabel();
        initialNeuronSizeField = new javax.swing.JTextField();
        jLabel21 = new javax.swing.JLabel();
        inputContributionTextField = new javax.swing.JTextField();
        jLabel22 = new javax.swing.JLabel();
        jLabel23 = new javax.swing.JLabel();
        initialMinWeightField = new javax.swing.JTextField();
        jLabel24 = new javax.swing.JLabel();
        initialMaxWeightField = new javax.swing.JTextField();
        ouptputContributionTextField = new javax.swing.JTextField();
        jLabel25 = new javax.swing.JLabel();
        neuronSizeField = new javax.swing.JTextField();
        jPanel22 = new javax.swing.JPanel();
        jLabel34 = new javax.swing.JLabel();
        jLabel35 = new javax.swing.JLabel();
        loopingTimesToStabilityCheckField = new javax.swing.JTextField();
        jLabel36 = new javax.swing.JLabel();
        equalityIntervalToStabilityCheckField = new javax.swing.JTextField();
        jLabel37 = new javax.swing.JLabel();
        jLabel38 = new javax.swing.JLabel();
        maxLoopsForResultsField = new javax.swing.JTextField();
        activationFunctionTextField = new javax.swing.JTextField();
        neuronsForStabilityCheckingTextField = new javax.swing.JTextField();
        jPanel23 = new javax.swing.JPanel();
        jLabel39 = new javax.swing.JLabel();
        connectionProbabilityForwardInterNeuronField = new javax.swing.JTextField();
        jLabel40 = new javax.swing.JLabel();
        connectionProbabilityBackwardInterNeuronField = new javax.swing.JTextField();
        jLabel41 = new javax.swing.JLabel();
        inputContributionrobabilityField = new javax.swing.JTextField();
        jLabel42 = new javax.swing.JLabel();
        outputContributionProbabilityField = new javax.swing.JTextField();
        jPanel20 = new javax.swing.JPanel();
        jPanel18 = new javax.swing.JPanel();
        jLabel26 = new javax.swing.JLabel();
        jLabel27 = new javax.swing.JLabel();
        thresholdMutationRateField = new javax.swing.JTextField();
        maxThresholdExchangeFactorValueField = new javax.swing.JTextField();
        jPanel16 = new javax.swing.JPanel();
        jLabel28 = new javax.swing.JLabel();
        jLabel29 = new javax.swing.JLabel();
        weightsMutationRateField = new javax.swing.JTextField();
        maxWeightExchangevalueField = new javax.swing.JTextField();
        jPanel17 = new javax.swing.JPanel();
        jLabel30 = new javax.swing.JLabel();
        jLabel31 = new javax.swing.JLabel();
        connectionMutationRateField = new javax.swing.JTextField();
        disconnectionMutationRateField = new javax.swing.JTextField();
        jPanel19 = new javax.swing.JPanel();
        jLabel32 = new javax.swing.JLabel();
        jLabel33 = new javax.swing.JLabel();
        receiverNeuronNumberMutationRateField = new javax.swing.JTextField();
        responseNeuronNumberMutationRateField = new javax.swing.JTextField();
        jMenuBar = new javax.swing.JMenuBar();
        fileMenu = new javax.swing.JMenu();
        newConfigurationJMenuItem = new javax.swing.JMenuItem();
        openConfigMenuItem = new javax.swing.JMenuItem();
        saveConfigMenuItem = new javax.swing.JMenuItem();
        saveConfigAsMenuItem = new javax.swing.JMenuItem();
        saveConfigAsDefaultMenutem = new javax.swing.JMenuItem();
        jSeparator1 = new javax.swing.JPopupMenu.Separator();
        saveEvolutionMenuItem = new javax.swing.JMenuItem();
        loadEvolutionMenuItem = new javax.swing.JMenuItem();
        jSeparator3 = new javax.swing.JPopupMenu.Separator();
        exitMenuItem = new javax.swing.JMenuItem();
        runMenu = new javax.swing.JMenu();
        runEvolveProcessMenuItem = new javax.swing.JMenuItem();
        stopEvolveProcessMenuItem = new javax.swing.JMenuItem();
        jSeparator2 = new javax.swing.JPopupMenu.Separator();
        cancelEvolveProcessMenuItem = new javax.swing.JMenuItem();
        ViewMenu = new javax.swing.JMenu();
        viewConfigMenuItem = new javax.swing.JMenuItem();
        viewEvolutionGraphicMenuItem = new javax.swing.JMenuItem();
        viewPopuplationDetailMenuItem = new javax.swing.JMenuItem();
        helpMenu = new javax.swing.JMenu();
        contentMenuItem = new javax.swing.JMenuItem();
        aboutMenuItem = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        buttonBarPanel.setPreferredSize(new java.awt.Dimension(1000, 24));

        jToolBar1.setRollover(true);

        viewCurrentConfigButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/json-icon-16x16-25bn37hi.png"))); // NOI18N
        viewCurrentConfigButton.setToolTipText("View current config");
        viewCurrentConfigButton.setFocusable(false);
        viewCurrentConfigButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        viewCurrentConfigButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        viewCurrentConfigButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                viewCurrentConfigButtonActionPerformed(evt);
            }
        });
        jToolBar1.add(viewCurrentConfigButton);

        openConfigButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/load_json-icon-16x16-25bn37hi.png"))); // NOI18N
        openConfigButton.setToolTipText("Open config file");
        openConfigButton.setFocusable(false);
        openConfigButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        openConfigButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        openConfigButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                openConfigButtonActionPerformed(evt);
            }
        });
        jToolBar1.add(openConfigButton);

        saveConfigButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/save-icon-16x16-2viu8b8q.png"))); // NOI18N
        saveConfigButton.setToolTipText("save config file");
        saveConfigButton.setEnabled(false);
        saveConfigButton.setFocusable(false);
        saveConfigButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        saveConfigButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        saveConfigButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveConfigButtonActionPerformed(evt);
            }
        });
        jToolBar1.add(saveConfigButton);

        runButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/play-16x16-375.png"))); // NOI18N
        runButton.setToolTipText("evolve");
        runButton.setEnabled(false);
        runButton.setFocusable(false);
        runButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        runButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        runButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                runButtonActionPerformed(evt);
            }
        });
        jToolBar1.add(runButton);

        loadEvolveDataButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/lineChart-16x16-204535.png"))); // NOI18N
        loadEvolveDataButton.setToolTipText("load data from saved evolution process");
        loadEvolveDataButton.setFocusable(false);
        loadEvolveDataButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        loadEvolveDataButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        loadEvolveDataButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                loadEvolveDataButtonActionPerformed(evt);
            }
        });
        jToolBar1.add(loadEvolveDataButton);

        saveEvolveDataButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/saveLineChart-16x16-204535.png"))); // NOI18N
        saveEvolveDataButton.setToolTipText("save data of current evolution process");
        saveEvolveDataButton.setFocusable(false);
        saveEvolveDataButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        saveEvolveDataButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        saveEvolveDataButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveEvolveDataButtonActionPerformed(evt);
            }
        });
        jToolBar1.add(saveEvolveDataButton);

        viewAgentDetailsButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/xarxa_nodes_16x16.png"))); // NOI18N
        viewAgentDetailsButton.setToolTipText("View neural agents detail");
        viewAgentDetailsButton.setFocusable(false);
        viewAgentDetailsButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        viewAgentDetailsButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        viewAgentDetailsButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                viewAgentDetailsButtonActionPerformed(evt);
            }
        });
        jToolBar1.add(viewAgentDetailsButton);

        loadAgentDetailsButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/load_xarxa_nodes_16x16.png"))); // NOI18N
        loadAgentDetailsButton.setToolTipText("loand and view saved neural agents");
        loadAgentDetailsButton.setFocusable(false);
        loadAgentDetailsButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        loadAgentDetailsButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        loadAgentDetailsButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                loadAgentDetailsButtonActionPerformed(evt);
            }
        });
        jToolBar1.add(loadAgentDetailsButton);

        javax.swing.GroupLayout buttonBarPanelLayout = new javax.swing.GroupLayout(buttonBarPanel);
        buttonBarPanel.setLayout(buttonBarPanelLayout);
        buttonBarPanelLayout.setHorizontalGroup(
            buttonBarPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jToolBar1, javax.swing.GroupLayout.DEFAULT_SIZE, 1053, Short.MAX_VALUE)
        );
        buttonBarPanelLayout.setVerticalGroup(
            buttonBarPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(buttonBarPanelLayout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(jToolBar1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );

        getContentPane().add(buttonBarPanel, java.awt.BorderLayout.NORTH);

        jPanel2.setLayout(new java.awt.BorderLayout());

        jPanelGraph.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jPanelGraph.setMaximumSize(new java.awt.Dimension(10000, 10000));
        jPanelGraph.setPreferredSize(new java.awt.Dimension(720, 350));
        jPanelGraph.setVerifyInputWhenFocusTarget(false);
        jPanelGraph.setLayout(new javax.swing.BoxLayout(jPanelGraph, javax.swing.BoxLayout.PAGE_AXIS));
        jPanel2.add(jPanelGraph, java.awt.BorderLayout.CENTER);

        jTabbedPane1.setPreferredSize(new java.awt.Dimension(700, 245));

        processControlsPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Process controls"));

        finishProcessButton.setText("Finish");
        finishProcessButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                finishProcessButtonActionPerformed(evt);
            }
        });

        stopStarToggleButton.setText("Stop");
        stopStarToggleButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                stopStarToggleButtonActionPerformed(evt);
            }
        });

        viewGraphCheckBox.setSelected(true);

        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/lineChart-16x16-204535.png"))); // NOI18N

        jLabel2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Text_16x16.png"))); // NOI18N

        viewTextCheckBox.setSelected(true);

        javax.swing.GroupLayout processControlsPanelLayout = new javax.swing.GroupLayout(processControlsPanel);
        processControlsPanel.setLayout(processControlsPanelLayout);
        processControlsPanelLayout.setHorizontalGroup(
            processControlsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, processControlsPanelLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(processControlsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(finishProcessButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(stopStarToggleButton, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(processControlsPanelLayout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(viewGraphCheckBox)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(viewTextCheckBox)))
                .addContainerGap())
        );
        processControlsPanelLayout.setVerticalGroup(
            processControlsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(processControlsPanelLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(finishProcessButton)
                .addGap(18, 18, 18)
                .addComponent(stopStarToggleButton)
                .addGap(18, 18, 18)
                .addGroup(processControlsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(viewGraphCheckBox)
                    .addComponent(jLabel1)
                    .addComponent(jLabel2)
                    .addComponent(viewTextCheckBox))
                .addContainerGap())
        );

        jPanel3.setBorder(javax.swing.BorderFactory.createTitledBorder("Information"));

        jLabel3.setText("Cicle number:");

        cicleNumberTextField.setEnabled(false);
        cicleNumberTextField.setFocusable(false);

        jLabel4.setText("Replaced agents:");

        replacedAgentsTextField.setEnabled(false);
        replacedAgentsTextField.setFocusable(false);

        jPanel5.setBorder(javax.swing.BorderFactory.createTitledBorder("Performanfe information"));

        jLabel5.setText("Average:");

        jLabel6.setText("Maximum:");

        jLabel7.setText("Minimum:");

        performanceAverageTextField.setEnabled(false);
        performanceAverageTextField.setFocusable(false);

        performanceMaxTextField.setEnabled(false);
        performanceMaxTextField.setFocusable(false);

        performanceMinTextField.setEnabled(false);
        performanceMinTextField.setFocusable(false);

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel5Layout.createSequentialGroup()
                        .addComponent(jLabel7)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(performanceMinTextField, javax.swing.GroupLayout.DEFAULT_SIZE, 266, Short.MAX_VALUE))
                    .addGroup(jPanel5Layout.createSequentialGroup()
                        .addComponent(jLabel6)
                        .addGap(8, 8, 8)
                        .addComponent(performanceMaxTextField))
                    .addGroup(jPanel5Layout.createSequentialGroup()
                        .addComponent(jLabel5)
                        .addGap(18, 18, 18)
                        .addComponent(performanceAverageTextField)))
                .addContainerGap())
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(performanceAverageTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED, 34, Short.MAX_VALUE)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6)
                    .addComponent(performanceMaxTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED, 35, Short.MAX_VALUE)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel7)
                    .addComponent(performanceMinTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        jPanel6.setBorder(javax.swing.BorderFactory.createTitledBorder("Other average information"));

        jLabel8.setText("Act. Func. linearity degree:");
        jLabel8.setEnabled(false);

        jLabel9.setText("Calculation eficiency:");

        jLabel10.setText("Neuron density:");

        infoLinearityDegreeTextField.setEnabled(false);
        infoLinearityDegreeTextField.setFocusable(false);

        infoCalculationEficiencyTextField.setEnabled(false);
        infoCalculationEficiencyTextField.setFocusable(false);

        infoNeuronDensityTextField.setEnabled(false);
        infoNeuronDensityTextField.setFocusable(false);

        javax.swing.GroupLayout jPanel6Layout = new javax.swing.GroupLayout(jPanel6);
        jPanel6.setLayout(jPanel6Layout);
        jPanel6Layout.setHorizontalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel8)
                    .addComponent(jLabel9)
                    .addComponent(jLabel10))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(infoLinearityDegreeTextField)
                    .addComponent(infoCalculationEficiencyTextField)
                    .addComponent(infoNeuronDensityTextField))
                .addContainerGap())
        );
        jPanel6Layout.setVerticalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel6Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel10)
                    .addComponent(infoNeuronDensityTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel9)
                    .addComponent(infoCalculationEficiencyTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel8)
                    .addComponent(infoLinearityDegreeTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel3)
                    .addComponent(jLabel4))
                .addGap(28, 28, 28)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(replacedAgentsTextField, javax.swing.GroupLayout.DEFAULT_SIZE, 83, Short.MAX_VALUE)
                    .addComponent(cicleNumberTextField))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(cicleNumberTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(replacedAgentsTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addComponent(jPanel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jPanel6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(processControlsPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(processControlsPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );

        jTabbedPane1.addTab("Run time information", jPanel1);

        jPanel7.setPreferredSize(new java.awt.Dimension(200, 163));

        jLabel11.setText("Minimum best performance:");

        minimumBestPerformanceValueLabel.setEditable(false);
        minimumBestPerformanceValueLabel.setFont(new java.awt.Font("Liberation Sans", 0, 11)); // NOI18N
        minimumBestPerformanceValueLabel.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        minimumBestPerformanceValueLabel.setText("1.0");
        minimumBestPerformanceValueLabel.setBorder(null);
        minimumBestPerformanceValueLabel.setEnabled(false);
        minimumBestPerformanceValueLabel.setMinimumSize(new java.awt.Dimension(55, 23));
        minimumBestPerformanceValueLabel.setPreferredSize(new java.awt.Dimension(55, 23));

        jLabel12.setText("Minimum average performance:");

        minimumAveragePerformaceValueLabel.setEditable(false);
        minimumAveragePerformaceValueLabel.setFont(new java.awt.Font("Liberation Sans", 0, 11)); // NOI18N
        minimumAveragePerformaceValueLabel.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        minimumAveragePerformaceValueLabel.setText("0.9");
        minimumAveragePerformaceValueLabel.setBorder(null);
        minimumAveragePerformaceValueLabel.setEnabled(false);
        minimumAveragePerformaceValueLabel.setMinimumSize(new java.awt.Dimension(55, 23));
        minimumAveragePerformaceValueLabel.setPreferredSize(new java.awt.Dimension(55, 23));

        jLabel13.setText("Maximum cycles to process (x 1000):");

        maximumEvolutionaryCyclesValueLabel.setEditable(false);
        maximumEvolutionaryCyclesValueLabel.setFont(new java.awt.Font("Liberation Sans", 0, 11)); // NOI18N
        maximumEvolutionaryCyclesValueLabel.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        maximumEvolutionaryCyclesValueLabel.setText("1000");
        maximumEvolutionaryCyclesValueLabel.setToolTipText("");
        maximumEvolutionaryCyclesValueLabel.setBorder(null);
        maximumEvolutionaryCyclesValueLabel.setEnabled(false);
        maximumEvolutionaryCyclesValueLabel.setMinimumSize(new java.awt.Dimension(55, 23));
        maximumEvolutionaryCyclesValueLabel.setPreferredSize(new java.awt.Dimension(55, 23));

        jPanel9.setBorder(javax.swing.BorderFactory.createTitledBorder("Evolution process conditions"));
        jPanel9.setLayout(new java.awt.GridLayout(1, 2));

        jPanel10.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), "Vital advantages:"));

        usePerformanceAsVitalAdvantgeCheck.setSelected(true);
        usePerformanceAsVitalAdvantgeCheck.setText("Performance");
        usePerformanceAsVitalAdvantgeCheck.setEnabled(false);

        useNeuronDensityAsVitalAdvantgeCheck.setText("1 - Neuron c. density");
        useNeuronDensityAsVitalAdvantgeCheck.setEnabled(false);
        useNeuronDensityAsVitalAdvantgeCheck.setFocusable(false);

        useCalculationEficiencyAsVitalAdvantgeCheck.setText("Calculation eficiency");
        useCalculationEficiencyAsVitalAdvantgeCheck.setEnabled(false);
        useCalculationEficiencyAsVitalAdvantgeCheck.setFocusable(false);

        javax.swing.GroupLayout jPanel10Layout = new javax.swing.GroupLayout(jPanel10);
        jPanel10.setLayout(jPanel10Layout);
        jPanel10Layout.setHorizontalGroup(
            jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel10Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(usePerformanceAsVitalAdvantgeCheck)
                    .addComponent(useCalculationEficiencyAsVitalAdvantgeCheck)
                    .addComponent(useNeuronDensityAsVitalAdvantgeCheck))
                .addContainerGap(14, Short.MAX_VALUE))
        );
        jPanel10Layout.setVerticalGroup(
            jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel10Layout.createSequentialGroup()
                .addComponent(usePerformanceAsVitalAdvantgeCheck)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(useNeuronDensityAsVitalAdvantgeCheck)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(useCalculationEficiencyAsVitalAdvantgeCheck)
                .addContainerGap(15, Short.MAX_VALUE))
        );

        jPanel9.add(jPanel10);

        jPanel11.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), "Reproductive advantages:"));

        useNeuronDensityAsReproductiveAdvantgeCheck.setText(" 1 - Neuron c. density");
        useNeuronDensityAsReproductiveAdvantgeCheck.setEnabled(false);
        useNeuronDensityAsReproductiveAdvantgeCheck.setFocusable(false);

        useCalculationEficiencyAsReproductiveAdvantgeCheck.setText("Calculation eficiency");
        useCalculationEficiencyAsReproductiveAdvantgeCheck.setEnabled(false);
        useCalculationEficiencyAsReproductiveAdvantgeCheck.setFocusable(false);

        javax.swing.GroupLayout jPanel11Layout = new javax.swing.GroupLayout(jPanel11);
        jPanel11.setLayout(jPanel11Layout);
        jPanel11Layout.setHorizontalGroup(
            jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel11Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(useCalculationEficiencyAsReproductiveAdvantgeCheck)
                .addGap(16, 16, 16))
            .addGroup(jPanel11Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(useNeuronDensityAsReproductiveAdvantgeCheck)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel11Layout.setVerticalGroup(
            jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel11Layout.createSequentialGroup()
                .addGap(26, 26, 26)
                .addComponent(useNeuronDensityAsReproductiveAdvantgeCheck)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(useCalculationEficiencyAsReproductiveAdvantgeCheck)
                .addContainerGap(16, Short.MAX_VALUE))
        );

        jPanel9.add(jPanel11);

        jPanel12.setBorder(javax.swing.BorderFactory.createTitledBorder("Properties to follow dynamically"));
        jPanel12.setMinimumSize(new java.awt.Dimension(100, 100));
        jPanel12.setPreferredSize(new java.awt.Dimension(100, 100));

        jPanel13.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        jPanel13.setPreferredSize(new java.awt.Dimension(100, 116));

        followPerformanceAdvantgeCheck.setSelected(true);
        followPerformanceAdvantgeCheck.setText("Performance");
        followPerformanceAdvantgeCheck.setEnabled(false);

        followCalculationEficiencyCheck.setText("Calculation eficiency");
        followCalculationEficiencyCheck.setEnabled(false);
        followCalculationEficiencyCheck.setFocusable(false);

        followAverageBetaValueCheck.setText("Act. func. linearity degree");
        followAverageBetaValueCheck.setEnabled(false);
        followAverageBetaValueCheck.setFocusable(false);

        followNeuronDensityAdvantgeCheck.setText("Neuron c. density");
        followNeuronDensityAdvantgeCheck.setEnabled(false);

        javax.swing.GroupLayout jPanel13Layout = new javax.swing.GroupLayout(jPanel13);
        jPanel13.setLayout(jPanel13Layout);
        jPanel13Layout.setHorizontalGroup(
            jPanel13Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel13Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel13Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(followCalculationEficiencyCheck, javax.swing.GroupLayout.PREFERRED_SIZE, 164, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(followPerformanceAdvantgeCheck, javax.swing.GroupLayout.PREFERRED_SIZE, 114, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(followAverageBetaValueCheck, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(followNeuronDensityAdvantgeCheck, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel13Layout.setVerticalGroup(
            jPanel13Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel13Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(followPerformanceAdvantgeCheck)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(followNeuronDensityAdvantgeCheck)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(followCalculationEficiencyCheck)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(followAverageBetaValueCheck))
        );

        javax.swing.GroupLayout jPanel12Layout = new javax.swing.GroupLayout(jPanel12);
        jPanel12.setLayout(jPanel12Layout);
        jPanel12Layout.setHorizontalGroup(
            jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel12Layout.createSequentialGroup()
                .addComponent(jPanel13, javax.swing.GroupLayout.PREFERRED_SIZE, 185, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(7, Short.MAX_VALUE))
        );
        jPanel12Layout.setVerticalGroup(
            jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel12Layout.createSequentialGroup()
                .addComponent(jPanel13, javax.swing.GroupLayout.DEFAULT_SIZE, 110, Short.MAX_VALUE)
                .addContainerGap())
        );

        jLabel15.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel15.setText("Verification process type");
        jLabel15.setFocusable(false);
        jLabel15.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);

        verificationProcessTypeTextField.setEditable(false);
        verificationProcessTypeTextField.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        verificationProcessTypeTextField.setText("true table");
        verificationProcessTypeTextField.setBorder(null);
        verificationProcessTypeTextField.setEnabled(false);
        verificationProcessTypeTextField.setFocusable(false);

        jPanel14.setPreferredSize(new java.awt.Dimension(428, 150));

        javax.swing.GroupLayout jPanel14Layout = new javax.swing.GroupLayout(jPanel14);
        jPanel14.setLayout(jPanel14Layout);
        jPanel14Layout.setHorizontalGroup(
            jPanel14Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 475, Short.MAX_VALUE)
        );
        jPanel14Layout.setVerticalGroup(
            jPanel14Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout jPanel7Layout = new javax.swing.GroupLayout(jPanel7);
        jPanel7.setLayout(jPanel7Layout);
        jPanel7Layout.setHorizontalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel7Layout.createSequentialGroup()
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel7Layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(jPanel7Layout.createSequentialGroup()
                                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel11)
                                    .addComponent(jLabel12))
                                .addGap(60, 60, 60)
                                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(minimumAveragePerformaceValueLabel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(minimumBestPerformanceValueLabel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(jPanel7Layout.createSequentialGroup()
                                .addComponent(jLabel13)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(maximumEvolutionaryCyclesValueLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 52, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jLabel15, javax.swing.GroupLayout.PREFERRED_SIZE, 153, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(verificationProcessTypeTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 104, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel7Layout.createSequentialGroup()
                        .addComponent(jPanel9, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jPanel12, javax.swing.GroupLayout.PREFERRED_SIZE, 202, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel14, javax.swing.GroupLayout.DEFAULT_SIZE, 475, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel7Layout.setVerticalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel7Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel15, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(verificationProcessTypeTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 63, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel7Layout.createSequentialGroup()
                        .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jLabel11, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(minimumBestPerformanceValueLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                        .addGap(5, 5, 5)
                        .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel7Layout.createSequentialGroup()
                                .addComponent(jLabel12)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel13)
                                    .addComponent(maximumEvolutionaryCyclesValueLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 17, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addComponent(minimumAveragePerformaceValueLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 17, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addGap(5, 5, 5)
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jPanel9, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel12, javax.swing.GroupLayout.DEFAULT_SIZE, 138, Short.MAX_VALUE)))
            .addGroup(jPanel7Layout.createSequentialGroup()
                .addComponent(jPanel14, javax.swing.GroupLayout.DEFAULT_SIZE, 206, Short.MAX_VALUE)
                .addContainerGap())
        );

        jTabbedPane1.addTab("System parameters", jPanel7);

        jPanel15.setAutoscrolls(true);
        jPanel15.setLayout(new java.awt.GridLayout());

        jPanel21.setPreferredSize(new java.awt.Dimension(500, 750));

        jLabel16.setText("Population size:");
        jLabel16.setToolTipText("");

        populationSizeField.setToolTipText("");
        populationSizeField.setEnabled(false);
        populationSizeField.setFocusable(false);
        populationSizeField.setPreferredSize(new java.awt.Dimension(171, 25));

        jLabel17.setText("Number of inputs:");

        inputSizeField.setEnabled(false);
        inputSizeField.setFocusable(false);
        inputSizeField.setPreferredSize(new java.awt.Dimension(171, 25));

        jLabel18.setText("Number of outputs:");

        outputSizeField.setEnabled(false);
        outputSizeField.setFocusable(false);
        outputSizeField.setPreferredSize(new java.awt.Dimension(171, 25));

        jLabel19.setText("Neurons receiving inputs:");

        inputReceiverNeuronsSizeField.setEnabled(false);
        inputReceiverNeuronsSizeField.setFocusable(false);
        inputReceiverNeuronsSizeField.setPreferredSize(new java.awt.Dimension(171, 25));
        inputReceiverNeuronsSizeField.setRequestFocusEnabled(false);

        jLabel20.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel20.setText("Neurons generating outputs:");

        outputResponseNeuronsSizeField.setEnabled(false);
        outputResponseNeuronsSizeField.setFocusable(false);
        outputResponseNeuronsSizeField.setPreferredSize(new java.awt.Dimension(171, 25));

        hasIntermediateNeuronsCheck.setText("Has intemediate neurons");
        hasIntermediateNeuronsCheck.setEnabled(false);
        hasIntermediateNeuronsCheck.setFocusable(false);

        initialNeuronSizeLabel.setText("Initial number of neurons:");

        initialNeuronSizeField.setEnabled(false);
        initialNeuronSizeField.setFocusable(false);
        initialNeuronSizeField.setPreferredSize(new java.awt.Dimension(171, 25));

        jLabel21.setText("Contribution type i -> n.:");

        inputContributionTextField.setEnabled(false);
        inputContributionTextField.setFocusable(false);
        inputContributionTextField.setMinimumSize(new java.awt.Dimension(20, 23));

        jLabel22.setText("Contribution type n. -> o.:");

        jLabel23.setText("Initial minimum weight:");

        initialMinWeightField.setEnabled(false);
        initialMinWeightField.setFocusable(false);

        jLabel24.setText("Initial maximum weight:");

        initialMaxWeightField.setEnabled(false);
        initialMaxWeightField.setFocusable(false);
        initialMaxWeightField.setPreferredSize(new java.awt.Dimension(175, 25));
        initialMaxWeightField.setRequestFocusEnabled(false);

        ouptputContributionTextField.setEnabled(false);
        ouptputContributionTextField.setFocusable(false);

        jLabel25.setText("Max neurons:");

        neuronSizeField.setEnabled(false);
        neuronSizeField.setFocusable(false);
        neuronSizeField.setPreferredSize(new java.awt.Dimension(171, 25));

        javax.swing.GroupLayout jPanel21Layout = new javax.swing.GroupLayout(jPanel21);
        jPanel21.setLayout(jPanel21Layout);
        jPanel21Layout.setHorizontalGroup(
            jPanel21Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel21Layout.createSequentialGroup()
                .addGroup(jPanel21Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel21Layout.createSequentialGroup()
                        .addGroup(jPanel21Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel20)
                            .addComponent(jLabel19)
                            .addComponent(jLabel18, javax.swing.GroupLayout.PREFERRED_SIZE, 129, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel16, javax.swing.GroupLayout.PREFERRED_SIZE, 129, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel17, javax.swing.GroupLayout.PREFERRED_SIZE, 129, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel21Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(inputReceiverNeuronsSizeField, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 74, Short.MAX_VALUE)
                            .addComponent(outputSizeField, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 1, Short.MAX_VALUE)
                            .addComponent(outputResponseNeuronsSizeField, javax.swing.GroupLayout.PREFERRED_SIZE, 1, Short.MAX_VALUE)
                            .addComponent(inputSizeField, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 1, Short.MAX_VALUE)
                            .addComponent(populationSizeField, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 1, Short.MAX_VALUE)))
                    .addGroup(jPanel21Layout.createSequentialGroup()
                        .addComponent(hasIntermediateNeuronsCheck)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel21Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel21Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addComponent(initialNeuronSizeLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel21, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel22, javax.swing.GroupLayout.PREFERRED_SIZE, 151, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jLabel23, javax.swing.GroupLayout.PREFERRED_SIZE, 151, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel24)
                    .addComponent(jLabel25, javax.swing.GroupLayout.PREFERRED_SIZE, 94, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(19, 19, 19)
                .addGroup(jPanel21Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(neuronSizeField, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                    .addComponent(initialMaxWeightField, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 1, Short.MAX_VALUE)
                    .addComponent(initialMinWeightField, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 74, Short.MAX_VALUE)
                    .addComponent(ouptputContributionTextField, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(inputContributionTextField, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(initialNeuronSizeField, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 1, Short.MAX_VALUE))
                .addGap(15, 15, 15))
        );
        jPanel21Layout.setVerticalGroup(
            jPanel21Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel21Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel21Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel21Layout.createSequentialGroup()
                        .addGroup(jPanel21Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel16, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(populationSizeField, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel21Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(inputSizeField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel17))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel21Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(outputSizeField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel18, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel21Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(inputReceiverNeuronsSizeField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel19, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel21Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel20)
                            .addComponent(outputResponseNeuronsSizeField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(jPanel21Layout.createSequentialGroup()
                        .addGroup(jPanel21Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(initialNeuronSizeLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(initialNeuronSizeField, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel21Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel21)
                            .addComponent(inputContributionTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel21Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(ouptputContributionTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel22, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel21Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel23)
                            .addComponent(initialMinWeightField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel21Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel24, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(initialMaxWeightField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel21Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel21Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(hasIntermediateNeuronsCheck)
                        .addComponent(jLabel25))
                    .addComponent(neuronSizeField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(13, 13, 13))
        );

        jPanel15.add(jPanel21);

        jPanel22.setPreferredSize(new java.awt.Dimension(500, 350));

        jLabel34.setText("activation function:");

        jLabel35.setText("Stability checking type:");

        loopingTimesToStabilityCheckField.setEnabled(false);
        loopingTimesToStabilityCheckField.setFocusable(false);

        jLabel36.setText("Stability checking prec.:");
        jLabel36.setMaximumSize(new java.awt.Dimension(365, 17));
        jLabel36.setMinimumSize(new java.awt.Dimension(365, 17));
        jLabel36.setPreferredSize(new java.awt.Dimension(365, 17));

        equalityIntervalToStabilityCheckField.setEnabled(false);
        equalityIntervalToStabilityCheckField.setFocusable(false);

        jLabel37.setText("What neurons forstability?");

        jLabel38.setText("Max loops for stability checking:");

        maxLoopsForResultsField.setEnabled(false);
        maxLoopsForResultsField.setFocusable(false);

        activationFunctionTextField.setEnabled(false);
        activationFunctionTextField.setFocusable(false);

        neuronsForStabilityCheckingTextField.setEnabled(false);
        neuronsForStabilityCheckingTextField.setFocusable(false);

        jPanel23.setBorder(javax.swing.BorderFactory.createTitledBorder("Neuron connectivity"));
        jPanel23.setEnabled(false);
        jPanel23.setFocusable(false);
        jPanel23.setPreferredSize(new java.awt.Dimension(500, 300));

        jLabel39.setText("Forward con. rate:");

        connectionProbabilityForwardInterNeuronField.setEnabled(false);
        connectionProbabilityForwardInterNeuronField.setFocusable(false);

        jLabel40.setText("Backward con. rate:");

        connectionProbabilityBackwardInterNeuronField.setEnabled(false);
        connectionProbabilityBackwardInterNeuronField.setFocusable(false);

        jLabel41.setText("i -> receiver n. rate:");

        inputContributionrobabilityField.setEnabled(false);
        inputContributionrobabilityField.setFocusable(false);

        jLabel42.setText("Resp. n. -> o rate:");

        outputContributionProbabilityField.setEnabled(false);
        outputContributionProbabilityField.setFocusable(false);

        javax.swing.GroupLayout jPanel23Layout = new javax.swing.GroupLayout(jPanel23);
        jPanel23.setLayout(jPanel23Layout);
        jPanel23Layout.setHorizontalGroup(
            jPanel23Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel23Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel23Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel39)
                    .addComponent(jLabel40)
                    .addComponent(jLabel41, javax.swing.GroupLayout.PREFERRED_SIZE, 116, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel42, javax.swing.GroupLayout.PREFERRED_SIZE, 112, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(57, 57, 57)
                .addGroup(jPanel23Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel23Layout.createSequentialGroup()
                        .addGroup(jPanel23Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(outputContributionProbabilityField)
                            .addComponent(inputContributionrobabilityField)
                            .addComponent(connectionProbabilityBackwardInterNeuronField))
                        .addGap(6, 6, 6))
                    .addGroup(jPanel23Layout.createSequentialGroup()
                        .addComponent(connectionProbabilityForwardInterNeuronField)
                        .addContainerGap())))
        );
        jPanel23Layout.setVerticalGroup(
            jPanel23Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel23Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel23Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel39)
                    .addComponent(connectionProbabilityForwardInterNeuronField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel23Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel40)
                    .addComponent(connectionProbabilityBackwardInterNeuronField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel23Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel41)
                    .addComponent(inputContributionrobabilityField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel23Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(outputContributionProbabilityField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel42))
                .addGap(28, 28, 28))
        );

        javax.swing.GroupLayout jPanel22Layout = new javax.swing.GroupLayout(jPanel22);
        jPanel22.setLayout(jPanel22Layout);
        jPanel22Layout.setHorizontalGroup(
            jPanel22Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel22Layout.createSequentialGroup()
                .addGroup(jPanel22Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel22Layout.createSequentialGroup()
                        .addComponent(jLabel38)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(maxLoopsForResultsField, javax.swing.GroupLayout.PREFERRED_SIZE, 1, Short.MAX_VALUE))
                    .addGroup(jPanel22Layout.createSequentialGroup()
                        .addGroup(jPanel22Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel34)
                            .addComponent(jLabel35, javax.swing.GroupLayout.PREFERRED_SIZE, 144, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel36, javax.swing.GroupLayout.PREFERRED_SIZE, 144, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel37))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel22Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(activationFunctionTextField)
                            .addComponent(loopingTimesToStabilityCheckField)
                            .addComponent(equalityIntervalToStabilityCheckField)
                            .addComponent(neuronsForStabilityCheckingTextField))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jPanel23, javax.swing.GroupLayout.DEFAULT_SIZE, 280, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel22Layout.setVerticalGroup(
            jPanel22Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel22Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel22Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel22Layout.createSequentialGroup()
                        .addGap(3, 3, 3)
                        .addGroup(jPanel22Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel34, javax.swing.GroupLayout.PREFERRED_SIZE, 17, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(activationFunctionTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel22Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel35)
                            .addComponent(loopingTimesToStabilityCheckField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel22Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel36, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(equalityIntervalToStabilityCheckField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel22Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(neuronsForStabilityCheckingTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel37))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel22Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel38)
                            .addComponent(maxLoopsForResultsField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addComponent(jPanel23, javax.swing.GroupLayout.PREFERRED_SIZE, 166, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(38, Short.MAX_VALUE))
        );

        jPanel15.add(jPanel22);

        jTabbedPane1.addTab("ANN generation parameters", jPanel15);

        jPanel20.setPreferredSize(new java.awt.Dimension(1000, 550));
        jPanel20.setLayout(new java.awt.GridLayout(2, 2));

        jPanel18.setBorder(javax.swing.BorderFactory.createTitledBorder("Activation function changes"));
        jPanel18.setEnabled(false);
        jPanel18.setFocusable(false);

        jLabel26.setText("Linearity changing rate:");

        jLabel27.setText("Linearity max increment:");

        thresholdMutationRateField.setEnabled(false);
        thresholdMutationRateField.setFocusable(false);

        maxThresholdExchangeFactorValueField.setEnabled(false);
        maxThresholdExchangeFactorValueField.setFocusable(false);

        javax.swing.GroupLayout jPanel18Layout = new javax.swing.GroupLayout(jPanel18);
        jPanel18.setLayout(jPanel18Layout);
        jPanel18Layout.setHorizontalGroup(
            jPanel18Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel18Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel18Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel26)
                    .addComponent(jLabel27))
                .addGap(129, 129, 129)
                .addGroup(jPanel18Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(maxThresholdExchangeFactorValueField)
                    .addComponent(thresholdMutationRateField))
                .addContainerGap())
        );
        jPanel18Layout.setVerticalGroup(
            jPanel18Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel18Layout.createSequentialGroup()
                .addGap(14, 14, 14)
                .addGroup(jPanel18Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel26)
                    .addComponent(thresholdMutationRateField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel18Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel27)
                    .addComponent(maxThresholdExchangeFactorValueField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(15, Short.MAX_VALUE))
        );

        jPanel20.add(jPanel18);

        jPanel16.setBorder(javax.swing.BorderFactory.createTitledBorder("Weight changes"));
        jPanel16.setEnabled(false);
        jPanel16.setFocusable(false);

        jLabel28.setText("Neuronal weight changing rate:");

        jLabel29.setText("Neuronal weight maximum increment:");

        weightsMutationRateField.setEnabled(false);
        weightsMutationRateField.setFocusable(false);

        maxWeightExchangevalueField.setEnabled(false);
        maxWeightExchangevalueField.setFocusable(false);

        javax.swing.GroupLayout jPanel16Layout = new javax.swing.GroupLayout(jPanel16);
        jPanel16.setLayout(jPanel16Layout);
        jPanel16Layout.setHorizontalGroup(
            jPanel16Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel16Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel16Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel28)
                    .addComponent(jLabel29))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel16Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(maxWeightExchangevalueField, javax.swing.GroupLayout.DEFAULT_SIZE, 213, Short.MAX_VALUE)
                    .addComponent(weightsMutationRateField))
                .addContainerGap())
        );
        jPanel16Layout.setVerticalGroup(
            jPanel16Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel16Layout.createSequentialGroup()
                .addGap(15, 15, 15)
                .addGroup(jPanel16Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel28)
                    .addComponent(weightsMutationRateField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel16Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel29)
                    .addComponent(maxWeightExchangevalueField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(14, Short.MAX_VALUE))
        );

        jPanel20.add(jPanel16);

        jPanel17.setBorder(javax.swing.BorderFactory.createTitledBorder("Connectivity neuron changes"));
        jPanel17.setEnabled(false);

        jLabel30.setText("Neuronal connection rate:");

        jLabel31.setText("Neuronal disconnection rate:");

        connectionMutationRateField.setEnabled(false);
        connectionMutationRateField.setFocusable(false);

        disconnectionMutationRateField.setEnabled(false);
        disconnectionMutationRateField.setFocusable(false);

        javax.swing.GroupLayout jPanel17Layout = new javax.swing.GroupLayout(jPanel17);
        jPanel17.setLayout(jPanel17Layout);
        jPanel17Layout.setHorizontalGroup(
            jPanel17Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel17Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel17Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabel30, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel31, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(108, 108, 108)
                .addGroup(jPanel17Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(disconnectionMutationRateField)
                    .addComponent(connectionMutationRateField))
                .addContainerGap())
        );
        jPanel17Layout.setVerticalGroup(
            jPanel17Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel17Layout.createSequentialGroup()
                .addGap(14, 14, 14)
                .addGroup(jPanel17Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel30)
                    .addComponent(connectionMutationRateField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel17Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel31)
                    .addComponent(disconnectionMutationRateField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(15, Short.MAX_VALUE))
        );

        jPanel20.add(jPanel17);

        jPanel19.setBorder(javax.swing.BorderFactory.createTitledBorder("Response and receiver neurons change"));
        jPanel19.setEnabled(false);
        jPanel19.setFocusable(false);

        jLabel32.setText("Rate contribution (inputs to receiver neurons):");

        jLabel33.setText("Rate contribution (response neurons to outputs):");

        receiverNeuronNumberMutationRateField.setEnabled(false);
        receiverNeuronNumberMutationRateField.setFocusable(false);

        responseNeuronNumberMutationRateField.setEnabled(false);
        responseNeuronNumberMutationRateField.setFocusable(false);

        javax.swing.GroupLayout jPanel19Layout = new javax.swing.GroupLayout(jPanel19);
        jPanel19.setLayout(jPanel19Layout);
        jPanel19Layout.setHorizontalGroup(
            jPanel19Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel19Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel19Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel32, javax.swing.GroupLayout.PREFERRED_SIZE, 265, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel33))
                .addGap(12, 12, 12)
                .addGroup(jPanel19Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(responseNeuronNumberMutationRateField)
                    .addComponent(receiverNeuronNumberMutationRateField))
                .addContainerGap())
        );
        jPanel19Layout.setVerticalGroup(
            jPanel19Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel19Layout.createSequentialGroup()
                .addGap(15, 15, 15)
                .addGroup(jPanel19Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(receiverNeuronNumberMutationRateField)
                    .addComponent(jLabel32, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel19Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel33)
                    .addComponent(responseNeuronNumberMutationRateField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(14, Short.MAX_VALUE))
        );

        jPanel20.add(jPanel19);

        jTabbedPane1.addTab("ANN mutation parameters", jPanel20);

        jPanel2.add(jTabbedPane1, java.awt.BorderLayout.PAGE_END);

        getContentPane().add(jPanel2, java.awt.BorderLayout.CENTER);

        fileMenu.setMnemonic('f');
        fileMenu.setText("File");

        newConfigurationJMenuItem.setText("New configuration");
        newConfigurationJMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                newConfigurationJMenuItemActionPerformed(evt);
            }
        });
        fileMenu.add(newConfigurationJMenuItem);

        openConfigMenuItem.setMnemonic('o');
        openConfigMenuItem.setText("Open configuration");
        openConfigMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                openConfigMenuItemActionPerformed(evt);
            }
        });
        fileMenu.add(openConfigMenuItem);

        saveConfigMenuItem.setMnemonic('s');
        saveConfigMenuItem.setText("Save configuration");
        saveConfigMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveConfigMenuItemActionPerformed(evt);
            }
        });
        fileMenu.add(saveConfigMenuItem);

        saveConfigAsMenuItem.setMnemonic('a');
        saveConfigAsMenuItem.setText("Save configuration As ...");
        saveConfigAsMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveConfigAsMenuItemActionPerformed(evt);
            }
        });
        fileMenu.add(saveConfigAsMenuItem);

        saveConfigAsDefaultMenutem.setText("Save configuration as default");
        saveConfigAsDefaultMenutem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveConfigAsDefaultMenutemActionPerformed(evt);
            }
        });
        fileMenu.add(saveConfigAsDefaultMenutem);

        jSeparator1.setName(""); // NOI18N
        fileMenu.add(jSeparator1);

        saveEvolutionMenuItem.setText("Save evolution data");
        saveEvolutionMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveEvolutionMenuItemActionPerformed(evt);
            }
        });
        fileMenu.add(saveEvolutionMenuItem);

        loadEvolutionMenuItem.setText("Load evolution data");
        loadEvolutionMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                loadEvolutionMenuItemActionPerformed(evt);
            }
        });
        fileMenu.add(loadEvolutionMenuItem);
        fileMenu.add(jSeparator3);

        exitMenuItem.setMnemonic('x');
        exitMenuItem.setText("Exit");
        exitMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exitMenuItemActionPerformed(evt);
            }
        });
        fileMenu.add(exitMenuItem);

        jMenuBar.add(fileMenu);

        runMenu.setText("Run");

        runEvolveProcessMenuItem.setText("Run evolution process");
        runEvolveProcessMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                runEvolveProcessMenuItemActionPerformed(evt);
            }
        });
        runMenu.add(runEvolveProcessMenuItem);

        stopEvolveProcessMenuItem.setText("Stop evolution process");
        stopEvolveProcessMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                stopEvolveProcessMenuItemActionPerformed(evt);
            }
        });
        runMenu.add(stopEvolveProcessMenuItem);
        runMenu.add(jSeparator2);

        cancelEvolveProcessMenuItem.setText("Cancel evolution process");
        cancelEvolveProcessMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelEvolveProcessMenuItemActionPerformed(evt);
            }
        });
        runMenu.add(cancelEvolveProcessMenuItem);

        jMenuBar.add(runMenu);

        ViewMenu.setText("View");

        viewConfigMenuItem.setText("config data");
        viewConfigMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                viewConfigMenuItemActionPerformed(evt);
            }
        });
        ViewMenu.add(viewConfigMenuItem);

        viewEvolutionGraphicMenuItem.setText("evoljtion process data (text and graphic)");
        viewEvolutionGraphicMenuItem.setEnabled(false);
        viewEvolutionGraphicMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                viewEvolutionGraphicMenuItemActionPerformed(evt);
            }
        });
        ViewMenu.add(viewEvolutionGraphicMenuItem);

        viewPopuplationDetailMenuItem.setText("neural agents detail");
        viewPopuplationDetailMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                viewPopuplationDetailMenuItemActionPerformed(evt);
            }
        });
        ViewMenu.add(viewPopuplationDetailMenuItem);

        jMenuBar.add(ViewMenu);

        helpMenu.setMnemonic('h');
        helpMenu.setText("Help");

        contentMenuItem.setMnemonic('c');
        contentMenuItem.setText("Contents");
        contentMenuItem.setEnabled(false);
        contentMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                contentMenuItemActionPerformed(evt);
            }
        });
        helpMenu.add(contentMenuItem);

        aboutMenuItem.setMnemonic('a');
        aboutMenuItem.setText("About");
        aboutMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                aboutMenuItemActionPerformed(evt);
            }
        });
        helpMenu.add(aboutMenuItem);

        jMenuBar.add(helpMenu);

        setJMenuBar(jMenuBar);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void viewCurrentConfigButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_viewCurrentConfigButtonActionPerformed
        // TODO add your handling code here:
        NetvolutionBasicFrame nf = this.getEvolutionFrames(CntFrames.CONFIGURE_SYSTEM);
        this.getMenuEvents().showFrame(nf);
        this.setVisible(false);
    }//GEN-LAST:event_viewCurrentConfigButtonActionPerformed

    private void saveConfigButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveConfigButtonActionPerformed

    }//GEN-LAST:event_saveConfigButtonActionPerformed

    private void runButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_runButtonActionPerformed
        // TODO add your handling code here:
        //Repetir el procés 
        refreshJFreeForRunProcess();       
        updateViewForControls();
    }//GEN-LAST:event_runButtonActionPerformed

    private void finishProcessButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_finishProcessButtonActionPerformed
//        EvolutionaryEventSwingWorker worker = workerService.getWorker();
//        EvolutionaryEventSwingProcessor worker = workerService.getWorker();
        worker.finishProcess();
        updateViewForControls();
    }//GEN-LAST:event_finishProcessButtonActionPerformed

    private void stopStarToggleButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_stopStarToggleButtonActionPerformed
//        EvolutionaryEventSwingWorker worker = workerService.getWorker();
//        EvolutionaryEventSwingProcessor worker = workerService.getWorker();
        worker.stopProcess(stopStarToggleButton.isSelected());
        updateViewForControls();
    }//GEN-LAST:event_stopStarToggleButtonActionPerformed

    private void saveEvolveDataButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveEvolveDataButtonActionPerformed
        // TODO add your handling code here:
        this.getMenuEvents().saveDataItemEvent(new File(getDisplayedDataFilename()));
        this.isDataSaved=true;
        updateViewForControls();
    }//GEN-LAST:event_saveEvolveDataButtonActionPerformed

    private void loadEvolveDataButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_loadEvolveDataButtonActionPerformed
        // TODO add your handling code here:
        this.getMenuEvents().loadDataItemEvent(new File(getDisplayedDataFilename()), getSharedData());
        refreshJFreeFromLoadedData();
        updateGuiWithConfigData();
        updateViewForControls();
    }//GEN-LAST:event_loadEvolveDataButtonActionPerformed

    private void viewAgentDetailsButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_viewAgentDetailsButtonActionPerformed
        // TODO add your handling code here:
        this.getMenuEvents().createAndShowPopulationDetailFrame(this.getSharedData());
        this.setVisible(false);        
    }//GEN-LAST:event_viewAgentDetailsButtonActionPerformed

    private void loadAgentDetailsButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_loadAgentDetailsButtonActionPerformed
        // TODO add your handling code here:
        this.getMenuEvents().loadDataItemEvent(new File(getDisplayedDataFilename()), getSharedData());
        viewAgentDetailsButtonActionPerformed(evt);        
    }//GEN-LAST:event_loadAgentDetailsButtonActionPerformed

    private void openConfigButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_openConfigButtonActionPerformed
        // TODO add your handling code here:
        this.getMenuEvents().selectAndOpenConfigItemEvent((fAndCont) -> {
            this.setJsonConfigData(fAndCont.getContent());
            this.setFileConfigName(fAndCont.getFileName());
            return null;
        });       
        viewCurrentConfigButtonActionPerformed(evt);
    }//GEN-LAST:event_openConfigButtonActionPerformed

    private void newConfigurationJMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_newConfigurationJMenuItemActionPerformed
        this.setFileConfigName(this.getDefaultFileNameConfig());
        getMenuEvents().openConfigItemEvent((content) -> {
            this.setJsonConfigData(content);
            //updateGuiWithConfigData();
//            activationFunctionSelected = getActivationFunctionInstanceFromList(jsonConfigData.get("AnnBuilding").get("typeOfActivationFunction").asText());
            return null;
        }, getFileConfigName());
        viewCurrentConfigButtonActionPerformed(evt);
    }//GEN-LAST:event_newConfigurationJMenuItemActionPerformed

    private void openConfigMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_openConfigMenuItemActionPerformed
        // TODO add your handling code here:
        openConfigButtonActionPerformed(evt);
    }//GEN-LAST:event_openConfigMenuItemActionPerformed

    private void saveConfigMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveConfigMenuItemActionPerformed
        // TODO add your handling code here:
        if(getFileConfigName()==null){
            setFileConfigName(getDefaultFileNameConfig());
        }
        getMenuEvents().saveConfigItemEvent(getJsonConfigData(), getFileConfigName());
    }//GEN-LAST:event_saveConfigMenuItemActionPerformed

    private void saveConfigAsMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveConfigAsMenuItemActionPerformed
        // TODO add your handling code here:
        getMenuEvents().saveConfigAsItemEvent(getJsonConfigData(), (fname) -> {
            this.setFileConfigName(fname);
            return null;
        });
    }//GEN-LAST:event_saveConfigAsMenuItemActionPerformed

    private void saveConfigAsDefaultMenutemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveConfigAsDefaultMenutemActionPerformed
        // TODO add your handling code here:
        setFileConfigName(getDefaultFileNameConfig());
        getMenuEvents().saveConfigItemEvent(getJsonConfigData(), getFileConfigName());
    }//GEN-LAST:event_saveConfigAsDefaultMenutemActionPerformed

    private void saveEvolutionMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveEvolutionMenuItemActionPerformed
        // TODO add your handling code here:
        saveEvolveDataButtonActionPerformed(evt);
    }//GEN-LAST:event_saveEvolutionMenuItemActionPerformed

    private void loadEvolutionMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_loadEvolutionMenuItemActionPerformed
        // TODO add your handling code here:
        loadEvolveDataButtonActionPerformed(evt);
    }//GEN-LAST:event_loadEvolutionMenuItemActionPerformed

    private void exitMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exitMenuItemActionPerformed
        System.exit(0);
//        this.setVisible(false);
    }//GEN-LAST:event_exitMenuItemActionPerformed

    private void contentMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_contentMenuItemActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_contentMenuItemActionPerformed

    private void aboutMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_aboutMenuItemActionPerformed
        // TODO add your handling code here:
        getMenuEvents().aboutItemEvent();
    }//GEN-LAST:event_aboutMenuItemActionPerformed

    private void runEvolveProcessMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_runEvolveProcessMenuItemActionPerformed
        // TODO add your handling code here:
        if(isProcessRunning){
//            EvolutionaryEventSwingWorker worker = workerService.getWorker();
//            EvolutionaryEventSwingProcessor worker = workerService.getWorker();
            worker.stopProcess(false);
            stopStarToggleButton.setSelected(false);
            updateViewForControls();
        }else{
            runButtonActionPerformed(evt);
        }
    }//GEN-LAST:event_runEvolveProcessMenuItemActionPerformed

    private void viewEvolutionGraphicMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_viewEvolutionGraphicMenuItemActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_viewEvolutionGraphicMenuItemActionPerformed

    private void viewPopuplationDetailMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_viewPopuplationDetailMenuItemActionPerformed
        // TODO add your handling code here:
        viewAgentDetailsButtonActionPerformed(evt);
    }//GEN-LAST:event_viewPopuplationDetailMenuItemActionPerformed

    private void stopEvolveProcessMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_stopEvolveProcessMenuItemActionPerformed
        // TODO add your handling code here:
//        EvolutionaryEventSwingWorker worker = workerService.getWorker();
//        EvolutionaryEventSwingProcessor worker = workerService.getWorker();
        worker.stopProcess(true);
        stopStarToggleButton.setSelected(true);
        updateViewForControls();        
    }//GEN-LAST:event_stopEvolveProcessMenuItemActionPerformed

    private void cancelEvolveProcessMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelEvolveProcessMenuItemActionPerformed
        // TODO add your handling code here:
        finishProcessButtonActionPerformed(evt);
    }//GEN-LAST:event_cancelEvolveProcessMenuItemActionPerformed

    private void viewConfigMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_viewConfigMenuItemActionPerformed
        // TODO add your handling code here:
        viewCurrentConfigButtonActionPerformed(evt);
    }//GEN-LAST:event_viewConfigMenuItemActionPerformed
    
    public void updateViewForControls(){
        newConfigurationJMenuItem.setEnabled(true);

        viewCurrentConfigButton.setEnabled(!isProcessRunning);
        viewConfigMenuItem.setEnabled(!isProcessRunning);

        openConfigButton.setEnabled(!isProcessRunning);
        openConfigMenuItem.setEnabled(openConfigButton.isEnabled());

        saveConfigButton.setEnabled(!isProcessRunning);
        saveConfigMenuItem.setEnabled(false);
        saveConfigAsMenuItem.setEnabled(saveConfigButton.isEnabled());
        saveConfigAsDefaultMenutem.setEnabled(saveConfigButton.isEnabled());

        runButton.setEnabled(!isProcessRunning);
//        runButton.setEnabled(false);
        stopStarToggleButton.setEnabled(isProcessRunning);
        if(stopStarToggleButton.isSelected()){
            stopStarToggleButton.setText("Run");
        }else{
            stopStarToggleButton.setText("Stop");
        }
        runEvolveProcessMenuItem.setEnabled(!isProcessRunning || stopStarToggleButton.isSelected());
//        runEvolveProcessMenuItem.setEnabled(isProcessRunning && stopStarToggleButton.isSelected());
        
        finishProcessButton.setEnabled(isProcessRunning);
        stopEvolveProcessMenuItem.setEnabled(isProcessRunning && !stopStarToggleButton.isSelected());
        cancelEvolveProcessMenuItem.setEnabled(isProcessRunning);

        saveEvolveDataButton.setEnabled(!isProcessRunning && !isDataSaved);
        saveEvolutionMenuItem.setEnabled(saveEvolveDataButton.isEnabled());

        loadEvolveDataButton.setEnabled(!isProcessRunning);
        loadEvolutionMenuItem.setEnabled(loadEvolveDataButton.isEnabled());

        loadAgentDetailsButton.setEnabled(!isProcessRunning);
        
        viewEvolutionGraphicMenuItem.setEnabled(false);
        viewAgentDetailsButton.setEnabled(!isProcessRunning);
        
        exitMenuItem.setEnabled(true);
        
        viewPopuplationDetailMenuItem.setEnabled(viewAgentDetailsButton.isEnabled());        
    }
    
    public void updateGuiWithConfigData(){
        JsonNode partialData;
        partialData = this.getJsonConfigData().get("evolutionarySystem").get("stopEvolutionProcessOn");
        this.minimumBestPerformanceValueLabel.setText(partialData.get("minimumBestPerformance").asText());
        this.minimumAveragePerformaceValueLabel.setText(partialData.get("minimumAveragePerformance").asText());
        int v = partialData.get("maximumCyclesToProcess").asInt()/1000;
        this.maximumEvolutionaryCyclesValueLabel.setText(String.valueOf((int)v));
        partialData = this.getJsonConfigData().get("evolutionarySystem").get("evolutionProcessConditions");
        this.usePerformanceAsVitalAdvantgeCheck.setSelected(true);
        this.useNeuronDensityAsVitalAdvantgeCheck.setSelected(partialData.get("vitalAdvantages").get("neuronConnectionDensityComp").asBoolean());
        this.useCalculationEficiencyAsVitalAdvantgeCheck.setSelected(partialData.get("vitalAdvantages").get("calculationEficiency").asBoolean());
        this.useNeuronDensityAsReproductiveAdvantgeCheck.setSelected(partialData.get("reproductiveAdvantages").get("neuronConnectionDensityComp").asBoolean());
        this.useCalculationEficiencyAsReproductiveAdvantgeCheck.setSelected(partialData.get("reproductiveAdvantages").get("calculationEficiency").asBoolean());
        partialData = this.getJsonConfigData().get("evolutionarySystem").get("propertiesToFollow");
        this.followPerformanceAdvantgeCheck.setSelected(true);
        this.followNeuronDensityAdvantgeCheck.setSelected(partialData.get("neuronConnectionDensity").asBoolean());
        this.followCalculationEficiencyCheck.setSelected(partialData.get("calculationEficiency").asBoolean());
        this.followAverageBetaValueCheck.setSelected(partialData.get("linearityDegree").asBoolean());
        partialData = this.getJsonConfigData().get("evolutionarySystem").get("optionalDataToRecording").get("lineage");        
        partialData = this.getJsonConfigData().get("evolutionarySystem").get("evolutionEnvironment");
        this.verificationProcessTypeTextField.setText(partialData.get("verificationProcess").asText());
        partialData = this.getJsonConfigData().get("AnnBuilding");
        this.inputSizeField.setText(String.valueOf(partialData.get("numberOfInputs").asInt()));
        this.outputSizeField.setText(String.valueOf(partialData.get("numberOfOutputs").asInt()));
        this.inputReceiverNeuronsSizeField.setText(String.valueOf(partialData.get("numberOfReceivingNeurons").asInt()));
        this.outputResponseNeuronsSizeField.setText(String.valueOf(partialData.get("numberOfResponseNeurons").asInt()));
        this.hasIntermediateNeuronsCheck.setSelected(partialData.get("hasIntermediateNeurons").asBoolean());
        this.initialNeuronSizeField.setText(String.valueOf(partialData.get("initialNumberOfNeurons").asInt()));
        this.neuronSizeField.setText(String.valueOf(partialData.get("maxNumberOfNeurons").asInt()));
        this.inputContributionTextField.setText(partialData.get("TypeOfContributionInputs").asText());
        this.outputContributionProbabilityField.setText(partialData.get("TypeOfContributionOutputs").asText());
        this.initialMinWeightField.setText(String.valueOf(partialData.get("initialMinumumWeight").asDouble()));
        this.initialMaxWeightField.setText(String.valueOf(partialData.get("initialMaximumWeight").asDouble()));
        this.activationFunctionTextField.setText(partialData.get("typeOfActivationFunction").asText());
        this.loopingTimesToStabilityCheckField.setText(String.valueOf(partialData.get("numberOfEqualValuesToCheckStability").asInt()));
        this.equalityIntervalToStabilityCheckField.setText(String.valueOf(partialData.get("equalityRangeToCompareValues").asInt()));
        this.neuronsForStabilityCheckingTextField.setText(partialData.get("neuronsUsedToCheckStability").asText());
        this.maxLoopsForResultsField.setText(String.valueOf(partialData.get("maximumLoopsTogetResults").asInt()));
        this.connectionProbabilityForwardInterNeuronField.setText(String.valueOf(partialData.get("forwardConnectionPercent").asInt()));
        this.connectionProbabilityBackwardInterNeuronField.setText(String.valueOf(partialData.get("backwardConnectionPercent").asInt()));
        this.inputContributionrobabilityField.setText(String.valueOf(partialData.get("inputContributionPercent").asInt()));
        this.outputContributionProbabilityField.setText(String.valueOf(partialData.get("outputContributionPercent").asInt()));
        this.populationSizeField.setText(String.valueOf(partialData.get("populationSize").asInt()));
        partialData = this.getJsonConfigData().get("AnnMutation");
        this.thresholdMutationRateField.setText(String.valueOf(partialData.get("linearityChangingRate").asDouble()));
        this.maxThresholdExchangeFactorValueField.setText(String.valueOf(partialData.get("linearityMaxIncrement").asDouble()));
        this.weightsMutationRateField.setText(String.valueOf(partialData.get("weightChangingRate").asDouble()));
        this.maxWeightExchangevalueField.setText(String.valueOf(partialData.get("weightMaxIncrement").asDouble()));
        this.connectionMutationRateField.setText(String.valueOf(partialData.get("connectionRate").asDouble()));
        this.disconnectionMutationRateField.setText(String.valueOf(partialData.get("disconnectionRate").asDouble()));
        this.receiverNeuronNumberMutationRateField.setText(String.valueOf(partialData.get("contributionInputRate").asDouble()));
        this.responseNeuronNumberMutationRateField.setText(String.valueOf(partialData.get("contributionOutpuRate").asDouble()));
    }    
    
    public void init(ActivationFunction activationFunctionInstance){
        this.init(activationFunctionInstance, !isForRunningProcess());
    }
    
    public void init(ActivationFunction activationFunctionInstance, boolean fromFile){
       this.getSharedData().activationFunctionInstance = activationFunctionInstance;
       init(fromFile);
    }
   
    public void init(){
        this.init(!isForRunningProcess());
    }
        
    public void init(boolean fromFile){
        if(fromFile){
            initFromFile();
        }else{
            initForProcessing();
        }
    }
    
    public void initFromFile(){
        this.initComponents();
        refreshJFreeFromLoadedData();
        updateGuiWithConfigData();
    }
    
    public void initForProcessing(){
        this.initComponents();
        this.initJfree();
        this.initEnvironment();
        updateGuiWithConfigData();        
    }
    
    private void loadAndRefreshJFree(){
//        getSharedData().loadChartData(new File(getSharedData().displayedDataFilename));
        getSharedData().loadAllData(new File(getSharedData().displayedDataFilename));
        refreshJFreeFromLoadedData();
        updateGuiWithConfigData();
    }
    
    public void refreshJFreeForRunProcess(){
        jPanelGraph.removeAll();
        this.initJfree();
        this.initEnvironment();
        jPanelGraph.repaint();
        jPanelGraph.revalidate();
    }
    
    public void refreshJFreeFromLoadedData(){
        Map<String, XYSeries> sdev = new HashMap<>();
        XYSeriesCollection dataset = new XYSeriesCollection();
        for(String t: getSharedData().serieTitles){
            sdev.put(t, new XYSeries("Average of ".concat(SinglePropertyCalculatorItems.getItem(t).getDescription())));
            dataset.addSeries(sdev.get(t));
        }
        JFreeChart chart = ChartFactory.createXYLineChart("Evolution proces of neuronal agents", 
                "cycle number", "rate value", dataset, 
                PlotOrientation.VERTICAL,true, true, false);
        XYPlot plot = (XYPlot) chart.getPlot();
        plot.setAxisOffset(new RectangleInsets(5.0, 5.0, 5.0, 5.0));
        plot.setDomainGridlinePaint(Color.WHITE);
        plot.setRangeGridlinePaint(Color.WHITE);
        ValueAxis axis = plot.getDomainAxis();
        axis.setAutoRange(true);
        axis = plot.getRangeAxis();
        axis.setRange(0.0, 1.5);
        jPanelGraph.removeAll();
        jPanelGraph.repaint();
        jPanelGraph.revalidate();
        System.gc();
        int len = getSharedData().extraInfo.get(getSharedData().serieTitles.get(0)).size();
        for(int i=0; i<len; i++){
            for(String t: getSharedData().serieTitles){
                sdev.get(t).add(i, getSharedData().extraInfo.get(t).get(i), false);
            }
        }
        for(String t: getSharedData().serieTitles){
            sdev.get(t).fireSeriesChanged();
        }        
        ChartPanel viewer = new ChartPanel(chart);
        jPanelGraph.add(viewer);        
        jPanelGraph.repaint();
        jPanelGraph.revalidate();
        this.isProcessRunning=false;
    }
    
    private void initJfree(){        
        if(!sdev.isEmpty()){
            sdev.clear();
        }
        if(!propertiesToFollow.isEmpty()){
            propertiesToFollow.clear();
        }
        XYSeriesCollection dataset = new XYSeriesCollection();
        sdev.put("performance", new XYSeries("Average of performance"));
        dataset.addSeries(sdev.get("performance"));
        sdev.get("performance").setMaximumItemCount(MaximumItemCount);
        Iterator<String> iterator = getJsonConfigData().get("evolutionarySystem").get("propertiesToFollow").fieldNames();
        iterator.forEachRemaining((fn) -> {
            if(getJsonConfigData().get("evolutionarySystem").get("propertiesToFollow").get(fn).asBoolean()){
                sdev.put(fn, new XYSeries("Average of ".concat(SinglePropertyCalculatorItems.getItem(fn).getDescription())));
                dataset.addSeries(sdev.get(fn));
                sdev.get(fn).setMaximumItemCount(MaximumItemCount);
                propertiesToFollow.add(fn);
            }
        });
        
//        FastScatterPlot plot = new FastScatterPlot();
        
        JFreeChart chart = ChartFactory.createXYLineChart("Evolution proces of neuronal agents", 
                "cycle number", "rate value", dataset, 
                PlotOrientation.VERTICAL,true, true, false);
        
        XYPlot plot = (XYPlot) chart.getPlot();
        plot.setAxisOffset(new RectangleInsets(5.0, 5.0, 5.0, 5.0));
        plot.setDomainGridlinePaint(Color.WHITE);
        plot.setRangeGridlinePaint(Color.WHITE);
        ValueAxis axis = plot.getDomainAxis();
        axis.setAutoRange(true);
        axis.setFixedAutoRange(MaximumItemCount);
        axis = plot.getRangeAxis();
        axis.setRange(0.0, 1.5);
        
        
        
//        SamplingXYLineRenderer renderer = new SamplingXYLineRenderer();
//        plot.setRenderer(renderer);
//        for(int i=0; i< dataset.getSeriesCount();i++){
//            renderer.setSeriesStroke(i, new BasicStroke(3.0f, BasicStroke.CAP_ROUND,
//                BasicStroke.JOIN_ROUND));
//                if(i<SerieColorList.length){
//                    renderer.setSeriesPaint(i, SerieColorList[i]);
//                    renderer.setSeriesOutlinePaint(i, SerieColorList[i]);
//                }
//                renderer.setSeriesOutlineStroke(i, new BasicStroke(3.0f, BasicStroke.CAP_ROUND,
//                    BasicStroke.JOIN_ROUND));
//        }
        ChartPanel viewer = new ChartPanel(chart);
        jPanelGraph.add(viewer);
    }
    
    public EvolutionaryEventSwingWorker createEnvironmentAndWorker(JsonNode jsonConfig, ActivationFunction activationFunctionInstance){
        EvolutionaryEventSwingWorker worker;
//    public EvolutionaryEventSwingProcessor createEnvironmentAndWorker(JsonNode jsonConfig, ActivationFunction activationFunctionInstance){
//        EvolutionaryEventSwingProcessor worker;
        PtpNeuralNetworkConfiguration nnConfig = new PtpNeuralNetworkConfiguration();
        nnConfig.setActivationFunction(activationFunctionInstance);
        nnConfig.setEqualityIntervalToStabilityCheck((float) jsonConfig.get("AnnBuilding").get("equalityRangeToCompareValues").asDouble());
        nnConfig.setHasIntermediateNeurons(jsonConfig.get("AnnBuilding").get("hasIntermediateNeurons").asBoolean());
        nnConfig.setInitialNeuronSize(jsonConfig.get("AnnBuilding").get("initialNumberOfNeurons").asInt());
        nnConfig.setInputContribution(InputOutputContributionValues.valueOf(jsonConfig.get("AnnBuilding").get("TypeOfContributionInputs").asText()));
        nnConfig.setInputReceiverNeuronsSize(jsonConfig.get("AnnBuilding").get("numberOfReceivingNeurons").asInt());
        nnConfig.setInputSize(jsonConfig.get("AnnBuilding").get("numberOfInputs").asInt());
        nnConfig.setLoopingTimesToStabilityCheck(jsonConfig.get("AnnBuilding").get("numberOfEqualValuesToCheckStability").asInt());
        nnConfig.setMaxLoopsForResults(jsonConfig.get("AnnBuilding").get("maximumLoopsTogetResults").asInt());
        nnConfig.setMaxWeigt((float) jsonConfig.get("AnnBuilding").get("initialMaximumWeight").asDouble());
        nnConfig.setMinWeight((float) jsonConfig.get("AnnBuilding").get("initialMinumumWeight").asDouble());
        nnConfig.setNeuronSize(jsonConfig.get("AnnBuilding").get("maxNumberOfNeurons").asInt());
        nnConfig.setNeuronsForStabilityChecking(NeuronTypesForStabilityCheckingValues.valueOf(jsonConfig.get("AnnBuilding").get("neuronsUsedToCheckStability").asText()));
        nnConfig.setOutputContribution(InputOutputContributionValues.valueOf(jsonConfig.get("AnnBuilding").get("TypeOfContributionOutputs").asText()));
        nnConfig.setOutputResponseNeuronsSize(jsonConfig.get("AnnBuilding").get("numberOfResponseNeurons").asInt());
        nnConfig.setOutputSize(jsonConfig.get("AnnBuilding").get("numberOfOutputs").asInt());
        nnConfig.setConnectionProbabilityBackwardInterNeuron(jsonConfig.get("AnnBuilding").get("backwardConnectionPercent").asInt());
        nnConfig.setConnectionProbabilityForwardInterNeuron(jsonConfig.get("AnnBuilding").get("forwardConnectionPercent").asInt());
        nnConfig.setInputContributionrobability(jsonConfig.get("AnnBuilding").get("inputContributionPercent").asInt());
        nnConfig.setOutputContributionProbability(jsonConfig.get("AnnBuilding").get("outputContributionPercent").asInt());
        nnConfig.setReceiverNeuronNumberMutationRate((float) jsonConfig.get("AnnMutation").get("contributionInputRate").asDouble());
        nnConfig.setResponseNeuronNumberMutationRate((float) jsonConfig.get("AnnMutation").get("contributionOutpuRate").asDouble());
        nnConfig.setThresholdMutationRate((float) jsonConfig.get("AnnMutation").get("linearityChangingRate").asDouble());
        nnConfig.setMaxThresholdExchangeFactorValue((float) jsonConfig.get("AnnMutation").get("linearityMaxIncrement").asDouble());
        nnConfig.setWeightsMutationRate((float) jsonConfig.get("AnnMutation").get("weightChangingRate").asDouble());
        nnConfig.setMaxWeightExchangevalue((float) jsonConfig.get("AnnMutation").get("weightMaxIncrement").asDouble());
        nnConfig.setConnectionMutationRate((float) jsonConfig.get("AnnMutation").get("connectionRate").asDouble());
        nnConfig.setDisconnectionMutationRate((float) jsonConfig.get("AnnMutation").get("disconnectionRate").asDouble());
        
        ArrayNode ar = (ArrayNode) jsonConfig.get("evolutionarySystem").get("evolutionEnvironment").get("configEditors").get(
                jsonConfig.get("evolutionarySystem").get("evolutionEnvironment").get("verificationProcess").asText());
        Float[][] environmentInputSet = new Float[ar.size()][ar.get(0).get("inputs").size()];
        Float[][] environmentOutputSet = new Float[ar.size()][ar.get(0).get("outputs").size()];
        
        for(int i=0; i< ar.size(); i++){
            for(int j=0; j<environmentInputSet[i].length; j++){
                environmentInputSet[i][j] = (float) ar.get(i).get("inputs").get(j).asDouble();
            }
            for(int j=0; j<environmentOutputSet[i].length; j++){
                environmentOutputSet[i][j] = (float) ar.get(i).get("outputs").get(j).asDouble();
            }
        }
        
        JsonNode evolProcessConditions = jsonConfig.get("evolutionarySystem").get("evolutionProcessConditions");
        List<String> vitalAdvantages = new ArrayList<>();
        Iterator<Entry<String, JsonNode>> iterator = (Iterator<Entry<String, JsonNode>>) evolProcessConditions.get("vitalAdvantages").fields();
        while(iterator.hasNext()){
            Entry<String, JsonNode> e = iterator.next();
            if(e.getValue().asBoolean()){
                vitalAdvantages.add(e.getKey());
            }
        }
        List<String> reproductiveAdvantages = new ArrayList<>();
        iterator = (Iterator<Entry<String, JsonNode>>) evolProcessConditions.get("reproductiveAdvantages").fields();
        while(iterator.hasNext()){
            Entry<String, JsonNode> e = iterator.next();
            if(e.getValue().asBoolean()){
                reproductiveAdvantages.add(e.getKey());
            }
        }
        
        
        SurviveOptimizationMethodValues surviveOptimizationMethodValues = SurviveOptimizationMethodValues.getValueById(evolProcessConditions.get("optimizationMethodUsed").asInt());
        double minSurvivalRate = evolProcessConditions.get("survivalRateValue").asInt()/100.0;
        boolean keepProgenyLines = jsonConfig.get("evolutionarySystem").get("optionalDataToRecording").get("lineage").get("recording").asBoolean();
        OptimizeMethodItems factory = OptimizeMethodItems.getItem(surviveOptimizationMethodValues.getValue());
        OptimizationMethod optimizationMethod = factory.getInstance(this.getSharedData().getArrayValuesFromAttributeListOfConfig(factory.getForInitalizingInstanceFromConfig()));
        
        worker = new EvolutionaryEventSwingWorker();
//        worker = new EvolutionaryEventSwingProcessor();
        worker.createEnvironment(jsonConfig.get("AnnBuilding").get("populationSize").asInt(), 
                        nnConfig, 
                        environmentInputSet, 
                        environmentOutputSet,
                        vitalAdvantages,
                        reproductiveAdvantages,
                        propertiesToFollow,
                        optimizationMethod,
                        minSurvivalRate,
                        keepProgenyLines);
        worker.addEventHandler(EvolutionaryEvent.eventType, ev -> this.fileWriteDataOnEvolutionEvent(ev));
        worker.addEventHandler(ErrorOnProcessEvolution.eventType, ev -> this.onErrorProcessEvolution((ErrorOnProcessEvolution) ev));
        worker.addEventHandler(InitialEvolutionaryProcessEvent.eventType, ev -> this.onInitProcessEvolution((InitialEvolutionaryProcessEvent) ev));
        worker.setOuterEventProcessor(this::outerEventProcessor);
        
        worker.setProcessingParamenters((float) jsonConfig.get("evolutionarySystem").get("stopEvolutionProcessOn").get("minimumAveragePerformance").asDouble(), 
                (float) jsonConfig.get("evolutionarySystem").get("stopEvolutionProcessOn").get("minimumBestPerformance").asDouble(), 
                jsonConfig.get("evolutionarySystem").get("stopEvolutionProcessOn").get("maximumCyclesToProcess").asInt());
        return worker;
    }
    
    private void initEnvironment(){
//        EvolutionaryEventSwingProcessor worker;
//      sun.awt.AppContext appContext = AppContext.getAppContext();
//    if(appContext!=null){
//        appContext.remove(SwingWorker.class); 
//    } 
//        workerService = new CachedBackgroundTaskService();
        if(worker!=null){
            worker.getExecutor().shutdown();
            try {
                if(!worker.getExecutor().awaitTermination(5, TimeUnit.SECONDS)){
                    worker.getExecutor().shutdownNow();
                }
            } catch (InterruptedException ex) {
                Logger.getLogger(EvolutionProcessFrame.class.getName()).log(Level.SEVERE, null, ex);
            }
            worker = null;
            System.gc();
        }
        worker = createEnvironmentAndWorker(getJsonConfigData(), getActivationFunctionInstance());
        this.isDataSaved = false;
        netvolutionDataFileManager = new NetvolutionDataFileManager(getDisplayedDataFilename(), this.getSharedData().getBetterProgenyLines(), this.getSharedData().getBadProgenyLines());
        netvolutionDataFileManager.initForWriting(getJsonConfigData(), propertiesToFollow);
//        System.out.println(String.format("STARTING -WORKER-TH(%s)", Thread.currentThread().getName()));
//        worker.execute();  
        worker.executeWorker();
    } 

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenu ViewMenu;
    private javax.swing.JMenuItem aboutMenuItem;
    private javax.swing.JTextField activationFunctionTextField;
    private javax.swing.JPanel buttonBarPanel;
    private javax.swing.JMenuItem cancelEvolveProcessMenuItem;
    private javax.swing.JTextField cicleNumberTextField;
    private javax.swing.JTextField connectionMutationRateField;
    private javax.swing.JTextField connectionProbabilityBackwardInterNeuronField;
    private javax.swing.JTextField connectionProbabilityForwardInterNeuronField;
    private javax.swing.JMenuItem contentMenuItem;
    private javax.swing.JTextField disconnectionMutationRateField;
    private javax.swing.JTextField equalityIntervalToStabilityCheckField;
    private javax.swing.JMenuItem exitMenuItem;
    private javax.swing.JMenu fileMenu;
    private javax.swing.JButton finishProcessButton;
    private javax.swing.JCheckBox followAverageBetaValueCheck;
    private javax.swing.JCheckBox followCalculationEficiencyCheck;
    private javax.swing.JCheckBox followNeuronDensityAdvantgeCheck;
    private javax.swing.JCheckBox followPerformanceAdvantgeCheck;
    private javax.swing.JCheckBox hasIntermediateNeuronsCheck;
    private javax.swing.JMenu helpMenu;
    private javax.swing.JTextField infoCalculationEficiencyTextField;
    private javax.swing.JTextField infoLinearityDegreeTextField;
    private javax.swing.JTextField infoNeuronDensityTextField;
    private javax.swing.JTextField initialMaxWeightField;
    private javax.swing.JTextField initialMinWeightField;
    private javax.swing.JTextField initialNeuronSizeField;
    private javax.swing.JLabel initialNeuronSizeLabel;
    private javax.swing.JTextField inputContributionTextField;
    private javax.swing.JTextField inputContributionrobabilityField;
    private javax.swing.JTextField inputReceiverNeuronsSizeField;
    private javax.swing.JTextField inputSizeField;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel20;
    private javax.swing.JLabel jLabel21;
    private javax.swing.JLabel jLabel22;
    private javax.swing.JLabel jLabel23;
    private javax.swing.JLabel jLabel24;
    private javax.swing.JLabel jLabel25;
    private javax.swing.JLabel jLabel26;
    private javax.swing.JLabel jLabel27;
    private javax.swing.JLabel jLabel28;
    private javax.swing.JLabel jLabel29;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel30;
    private javax.swing.JLabel jLabel31;
    private javax.swing.JLabel jLabel32;
    private javax.swing.JLabel jLabel33;
    private javax.swing.JLabel jLabel34;
    private javax.swing.JLabel jLabel35;
    private javax.swing.JLabel jLabel36;
    private javax.swing.JLabel jLabel37;
    private javax.swing.JLabel jLabel38;
    private javax.swing.JLabel jLabel39;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel40;
    private javax.swing.JLabel jLabel41;
    private javax.swing.JLabel jLabel42;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JMenuBar jMenuBar;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel10;
    private javax.swing.JPanel jPanel11;
    private javax.swing.JPanel jPanel12;
    private javax.swing.JPanel jPanel13;
    private javax.swing.JPanel jPanel14;
    private javax.swing.JPanel jPanel15;
    private javax.swing.JPanel jPanel16;
    private javax.swing.JPanel jPanel17;
    private javax.swing.JPanel jPanel18;
    private javax.swing.JPanel jPanel19;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel20;
    private javax.swing.JPanel jPanel21;
    private javax.swing.JPanel jPanel22;
    private javax.swing.JPanel jPanel23;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JPanel jPanel9;
    private javax.swing.JPanel jPanelGraph;
    private javax.swing.JPopupMenu.Separator jSeparator1;
    private javax.swing.JPopupMenu.Separator jSeparator2;
    private javax.swing.JPopupMenu.Separator jSeparator3;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JToolBar jToolBar1;
    private javax.swing.JButton loadAgentDetailsButton;
    private javax.swing.JMenuItem loadEvolutionMenuItem;
    private javax.swing.JButton loadEvolveDataButton;
    private javax.swing.JTextField loopingTimesToStabilityCheckField;
    private javax.swing.JTextField maxLoopsForResultsField;
    private javax.swing.JTextField maxThresholdExchangeFactorValueField;
    private javax.swing.JTextField maxWeightExchangevalueField;
    private javax.swing.JTextField maximumEvolutionaryCyclesValueLabel;
    private javax.swing.JTextField minimumAveragePerformaceValueLabel;
    private javax.swing.JTextField minimumBestPerformanceValueLabel;
    private javax.swing.JTextField neuronSizeField;
    private javax.swing.JTextField neuronsForStabilityCheckingTextField;
    private javax.swing.JMenuItem newConfigurationJMenuItem;
    private javax.swing.JButton openConfigButton;
    private javax.swing.JMenuItem openConfigMenuItem;
    private javax.swing.JTextField ouptputContributionTextField;
    private javax.swing.JTextField outputContributionProbabilityField;
    private javax.swing.JTextField outputResponseNeuronsSizeField;
    private javax.swing.JTextField outputSizeField;
    private javax.swing.JTextField performanceAverageTextField;
    private javax.swing.JTextField performanceMaxTextField;
    private javax.swing.JTextField performanceMinTextField;
    private javax.swing.JTextField populationSizeField;
    private javax.swing.JPanel processControlsPanel;
    private javax.swing.JTextField receiverNeuronNumberMutationRateField;
    private javax.swing.JTextField replacedAgentsTextField;
    private javax.swing.JTextField responseNeuronNumberMutationRateField;
    private javax.swing.JButton runButton;
    private javax.swing.JMenuItem runEvolveProcessMenuItem;
    private javax.swing.JMenu runMenu;
    private javax.swing.JMenuItem saveConfigAsDefaultMenutem;
    private javax.swing.JMenuItem saveConfigAsMenuItem;
    private javax.swing.JButton saveConfigButton;
    private javax.swing.JMenuItem saveConfigMenuItem;
    private javax.swing.JMenuItem saveEvolutionMenuItem;
    private javax.swing.JButton saveEvolveDataButton;
    private javax.swing.JMenuItem stopEvolveProcessMenuItem;
    private javax.swing.JToggleButton stopStarToggleButton;
    private javax.swing.JTextField thresholdMutationRateField;
    private javax.swing.JCheckBox useCalculationEficiencyAsReproductiveAdvantgeCheck;
    private javax.swing.JCheckBox useCalculationEficiencyAsVitalAdvantgeCheck;
    private javax.swing.JCheckBox useNeuronDensityAsReproductiveAdvantgeCheck;
    private javax.swing.JCheckBox useNeuronDensityAsVitalAdvantgeCheck;
    private javax.swing.JCheckBox usePerformanceAsVitalAdvantgeCheck;
    private javax.swing.JTextField verificationProcessTypeTextField;
    private javax.swing.JButton viewAgentDetailsButton;
    private javax.swing.JMenuItem viewConfigMenuItem;
    private javax.swing.JButton viewCurrentConfigButton;
    private javax.swing.JMenuItem viewEvolutionGraphicMenuItem;
    private javax.swing.JCheckBox viewGraphCheckBox;
    private javax.swing.JMenuItem viewPopuplationDetailMenuItem;
    private javax.swing.JCheckBox viewTextCheckBox;
    private javax.swing.JTextField weightsMutationRateField;
    // End of variables declaration//GEN-END:variables

    private void fileWriteDataOnInitialEvolutionaryProcess(InitialEvolutionaryProcessEvent eev) {
        this.netvolutionDataFileManager.fileWriteDataOnInitialEvolutionaryProcess(eev);
    }

    private void fileWriteDataOnCompletedEvolutionaryProcess(CompletedEvolutionaryProcessEvent eev) {
        netvolutionDataFileManager.fileWriteDataOnCompletedEvolutionaryProcess(eev);
        netvolutionDataFileManager.endForWriting();
        onFinishProcessEvolution();
    }

    
    private void fileWriteDataOnFinishEvolutionCycle(FinishedEvolutionaryCycleEvent eev) {
            this.netvolutionDataFileManager.fileWriteDataOnFinishEvolutionCycle(eev);
    }

//    private void screenWriteDataOnFinishEvolutionCycle(FinishedEvolutionaryCycleEvent ev) {
//        System.out.println(String.format("Evolutionary cycle number: %d", ev.getId()));
//        System.out.println(String.format("Agents replaced: %d", ev.getReplacedAgents()));
//        System.out.println(String.format("Average performance: %f", ev.getAvgPerformance()));
//        System.out.println(String.format("Maximum performance: %f", ev.getMaxPerformance()));
//        System.out.println(String.format("Minimum performance: %f", ev.getMinPerformance()));
//        System.out.println("------------------------------------------");        
//    }

    private void fileWriteDataOnEvolutionEvent(EvolutionaryEvent event) {
        switch (event.getEventType()) {
            case InitialEvolutionaryProcessEvent.eventType:
                fileWriteDataOnInitialEvolutionaryProcess((InitialEvolutionaryProcessEvent) event);
                break;
            case FinishedEvolutionaryCycleEvent.eventType:
                fileWriteDataOnFinishEvolutionCycle((FinishedEvolutionaryCycleEvent) event);
                break;
            case ProgenyLinesEvent.eventType:
                fileWriteDataOnProgenyEvent((ProgenyLinesEvent) event);
                break;
            case CompletedEvolutionaryProcessEvent.eventType:
                fileWriteDataOnCompletedEvolutionaryProcess((CompletedEvolutionaryProcessEvent) event);
                break;
        }
        
    }
    
    private void fileWriteDataOnProgenyEvent(ProgenyLinesEvent event) {
        this.netvolutionDataFileManager.fileWriteDataOnProgenyLinesEvolutionaryProcess(event);     
    }
    
    private void onInitProcessEvolution(InitialEvolutionaryProcessEvent event) {
        isProcessRunning=true;
        updateViewForControls();
    }
    
    private void onFinishProcessEvolution() {
//        SwingUtilities.invokeLater(new Runnable() {
//            @Override
//            public void run() {
//                for(int i=0; i<5 && !worker.isDone(); i++){                    
//                    try {
//                        Thread.currentThread().sleep(1000);
//                    } catch (InterruptedException ex) {
//                        Logger.getLogger(EvolutionProcessFrame.class.getName()).log(Level.SEVERE, null, ex);
//                    }
//                }
//            }
//        });
        isProcessRunning=false;
        loadAndRefreshJFree();
        updateViewForControls();
    }
    
    private void onErrorProcessEvolution(ErrorOnProcessEvolution errorOnProcessEvolution) {
        StringWriter sw = new StringWriter();
        PrintWriter pw = new PrintWriter(sw);
        errorOnProcessEvolution.getException().printStackTrace(pw);
        System.out.println(sw.toString());
    }

    private void outerEventProcessor(EvolutionaryEvent eev) {
        FinishedEvolutionaryCycleEvent ev = (FinishedEvolutionaryCycleEvent) eev;
        if(viewGraphCheckBox.isSelected()){
            XYSeries s = sdev.get("performance");
            s.add(ev.getCycleNumber(), ev.getAvgPerformance());
            for(String k: propertiesToFollow){
                sdev.get(k).add(ev.getCycleNumber(), ev.getExtraInfo(k));
            }
        }
        if(viewTextCheckBox.isSelected()){
            this.cicleNumberTextField.setText(String.valueOf(ev.getCycleNumber()));
            this.replacedAgentsTextField.setText(String.valueOf(ev.getReplacedAgents()));
            this.performanceAverageTextField.setText(String.valueOf(ev.getAvgPerformance()));
            this.performanceMaxTextField.setText(String.valueOf(ev.getMaxPerformance()));
            this.performanceMinTextField.setText(String.valueOf(ev.getMinPerformance()));
            if(ev.hasExtraInfoKey("calculationEficiency")){
                this.infoCalculationEficiencyTextField.setText(String.valueOf(ev.getExtraInfo("calculationEficiency")));
            }
            if(ev.hasExtraInfoKey("neuronConnectionDensity")){
                this.infoNeuronDensityTextField.setText(String.valueOf(ev.getExtraInfo("neuronConnectionDensity")));
            }
            if(ev.hasExtraInfoKey("linearityDegree")){                
                this.infoLinearityDegreeTextField.setText(String.valueOf(ev.getExtraInfo("linearityDegree")));
            }
        }
    }

    @Override
    public void updateData() {
        if(isForRunningProcess()){
            refreshJFreeForRunProcess();                        
        }else{
            refreshJFreeFromLoadedData();        
        }
        updateGuiWithConfigData();
        updateViewForControls();
        forRunningProcess=false;
    }

    /**
     * @return the forRunningProcess
     */
    public boolean isForRunningProcess() {
        return forRunningProcess;
    }

    /**
     * @param forRunningProcess the forRunningProcess to set
     */
    public void setForRunningProcess(boolean forRunningProcess) {
        this.forRunningProcess = forRunningProcess;
    }
}
