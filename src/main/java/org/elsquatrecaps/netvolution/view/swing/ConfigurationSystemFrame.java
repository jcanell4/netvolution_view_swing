package org.elsquatrecaps.netvolution.view.swing;

import org.elsquatrecaps.netvolution.view.swing.tools.ActivationFunctionItems;
import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.node.ObjectNode;
import java.awt.Dimension;
import org.elsquatrecaps.netvolution.view.swing.tools.TrueTableVerificationPocessConfiguration;
import org.elsquatrecaps.netvolution.view.swing.tools.EventEnvironmentVerificationProcessConfiguration;
import java.awt.event.ActionEvent;
import java.awt.event.ItemEvent;
import java.io.File;
import java.util.ArrayList;
import java.util.Dictionary;
import java.util.HashMap;
import java.util.Hashtable;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import javax.swing.DefaultComboBoxModel;
import javax.swing.DefaultListModel;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JSlider;
import javax.swing.JTextField;
import javax.swing.event.ChangeEvent;
import javax.swing.event.ListSelectionEvent;
import org.elsquatrecaps.netvolution.constants.CntFrames;
import org.elsquatrecaps.netvolution.shareddata.NetvolutionSharedData;
import org.elsquatrecaps.netvolution.view.swing.tools.AbstractDataAndEditorBuilder;
import org.elsquatrecaps.netvolution.view.swing.tools.PositionType;
import org.elsquatrecaps.netvolution.view.swing.tools.VerificationProcessConfiguration;
import org.elsquatrecaps.rsjcb.netvolution.neuralnetwork.InputOutputContributionValues;
import org.elsquatrecaps.rsjcb.netvolution.neuralnetwork.NeuronTypesForStabilityCheckingValues;
import org.elsquatrecaps.rsjcb.netvolution.neuralnetwork.actfunctions.ActivationFunction;
import org.elsquatrecaps.utilities.tools.Identifiable;

/**
 *
 * @author josep
 */
public final class ConfigurationSystemFrame extends NetvolutionBasicFrame {
    private Boolean sliderIsMain=false;
    private Boolean fieldIsMain=false;
    private ActivationFunctionItems activationFunctionSelected;
    
    TrueTableVerificationPocessConfiguration ttVerificationProcessConfiguration;
    EventEnvironmentVerificationProcessConfiguration eetVerificationProcessConfiguration;
    
    /**
     * Creates new form ConfigurationSystemFrame
     */
    public ConfigurationSystemFrame() {
        this(new HashMap<>());
    }
    
    public ConfigurationSystemFrame(NetvolutionSharedData sharedData) {
        super(sharedData);
    }
    
    public ConfigurationSystemFrame(Map<String, NetvolutionBasicFrame> frames) {
        super(new NetvolutionSharedData());
        this.setFrames(frames);
        initComponents();
        moreInitComponents();
        if(!frames.containsKey(CntFrames.CONFIGURE_SYSTEM)){
            frames.put(CntFrames.CONFIGURE_SYSTEM, this);
        }
        openConfigFile(getDefaultFileNameConfig());
        this.updateViewForControls();               
    }
    

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        jPanel20 = new javax.swing.JPanel();
        jToolBar1 = new javax.swing.JToolBar();
        openConfigButton = new javax.swing.JButton();
        saveConfigButton = new javax.swing.JButton();
        runButton = new javax.swing.JButton();
        viewEvolveDataButton = new javax.swing.JButton();
        loadEvolveDataButton = new javax.swing.JButton();
        saveEvolveDataButton = new javax.swing.JButton();
        viewAgentDetailsButton = new javax.swing.JButton();
        loadAgentDetailsButton = new javax.swing.JButton();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        jScrollPane1 = new javax.swing.JScrollPane();
        jPanel1 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        minimumBestPerformanceValueLabel = new javax.swing.JTextField();
        minimumBestPerformanceValueSlider = new javax.swing.JSlider();
        jLabel2 = new javax.swing.JLabel();
        minimumAveragePerformaceValueLabel = new javax.swing.JTextField();
        minimumAveragePerformaceValueSlider = new javax.swing.JSlider();
        jLabel3 = new javax.swing.JLabel();
        maximumEvolutionaryCyclesValueLabel = new javax.swing.JTextField();
        maximumEvolutionaryCyclesValueSlider = new javax.swing.JSlider();
        maximumCyclesToProcessFactorComboBox = new javax.swing.JComboBox<>();
        jLabel40 = new javax.swing.JLabel();
        jPanel4 = new javax.swing.JPanel();
        jPanel3 = new javax.swing.JPanel();
        jPanel22 = new javax.swing.JPanel();
        optimizationMethodUsedComboBox = new javax.swing.JComboBox<>();
        jLabel34 = new javax.swing.JLabel();
        survivalRateValueTextField = new javax.swing.JTextField();
        jLabel35 = new javax.swing.JLabel();
        jLabel36 = new javax.swing.JLabel();
        jPanel6 = new javax.swing.JPanel();
        jLabel5 = new javax.swing.JLabel();
        useNeuronDensityAsReproductiveAdvantgeCheck = new javax.swing.JCheckBox();
        useCalculationEficiencyAsReproductiveAdvantgeCheck = new javax.swing.JCheckBox();
        usePerformanceAsReproductiveAdvantgeCheck = new javax.swing.JCheckBox();
        jPanel7 = new javax.swing.JPanel();
        jLabel4 = new javax.swing.JLabel();
        usePerformanceAsVitalAdvantgeCheck = new javax.swing.JCheckBox();
        useNeuronDensityAsVitalAdvantgeCheck = new javax.swing.JCheckBox();
        useCalculationEficiencyAsVitalAdvantgeCheck = new javax.swing.JCheckBox();
        jPanel5 = new javax.swing.JPanel();
        jTabbedPane2 = new javax.swing.JTabbedPane();
        jPanel9 = new javax.swing.JPanel();
        followPerformanceAdvantgeCheck = new javax.swing.JCheckBox();
        followNeuronDensityAdvantgeCheck = new javax.swing.JCheckBox();
        followCalculationEficiencyCheck = new javax.swing.JCheckBox();
        followAverageBetaValueCheck = new javax.swing.JCheckBox();
        jPanel21 = new javax.swing.JPanel();
        jPanel23 = new javax.swing.JPanel();
        lineageRecordingCheckBox = new javax.swing.JCheckBox();
        jLabel37 = new javax.swing.JLabel();
        jLabel38 = new javax.swing.JLabel();
        numberOfBestProgenyLinesToSaveTextField = new javax.swing.JTextField();
        numberOfWorstProgenyLinesToSaveTextField = new javax.swing.JTextField();
        jPanel8 = new javax.swing.JPanel();
        jPanel10 = new javax.swing.JPanel();
        jLabel6 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        verificationProcessList = new javax.swing.JList<>();
        verificationEditorPane = new javax.swing.JPanel();
        jPanel11 = new javax.swing.JPanel();
        jPanel12 = new javax.swing.JPanel();
        jLabel7 = new javax.swing.JLabel();
        populationSizeField = new javax.swing.JTextField();
        jLabel9 = new javax.swing.JLabel();
        inputSizeField = new javax.swing.JTextField();
        jLabel10 = new javax.swing.JLabel();
        outputSizeField = new javax.swing.JTextField();
        jLabel11 = new javax.swing.JLabel();
        inputReceiverNeuronsSizeField = new javax.swing.JTextField();
        jLabel12 = new javax.swing.JLabel();
        outputResponseNeuronsSizeField = new javax.swing.JTextField();
        hasIntermediateNeuronsCheck = new javax.swing.JCheckBox();
        initialNeuronSizeLabel = new javax.swing.JLabel();
        initialNeuronSizeField = new javax.swing.JTextField();
        jLabel13 = new javax.swing.JLabel();
        inputContributionCombo = new javax.swing.JComboBox<>();
        jLabel14 = new javax.swing.JLabel();
        outputContributionCombo = new javax.swing.JComboBox<>();
        jLabel15 = new javax.swing.JLabel();
        initialMinWeightField = new javax.swing.JTextField();
        jLabel16 = new javax.swing.JLabel();
        initialMaxWeightField = new javax.swing.JTextField();
        jPanel13 = new javax.swing.JPanel();
        jLabel8 = new javax.swing.JLabel();
        neuronSizeField = new javax.swing.JTextField();
        jLabel17 = new javax.swing.JLabel();
        activationFunctionCombo = new javax.swing.JComboBox<>();
        jLabel18 = new javax.swing.JLabel();
        loopingTimesToStabilityCheckField = new javax.swing.JTextField();
        jLabel19 = new javax.swing.JLabel();
        equalityIntervalToStabilityCheckField = new javax.swing.JTextField();
        jLabel20 = new javax.swing.JLabel();
        neuronsForStabilityCheckingCombo = new javax.swing.JComboBox<>();
        jLabel21 = new javax.swing.JLabel();
        maxLoopsForResultsField = new javax.swing.JTextField();
        jPanel14 = new javax.swing.JPanel();
        jLabel22 = new javax.swing.JLabel();
        connectionProbabilityForwardInterNeuronField = new javax.swing.JTextField();
        jLabel23 = new javax.swing.JLabel();
        connectionProbabilityBackwardInterNeuronField = new javax.swing.JTextField();
        jLabel24 = new javax.swing.JLabel();
        inputContributionrobabilityField = new javax.swing.JTextField();
        jLabel25 = new javax.swing.JLabel();
        outputContributionProbabilityField = new javax.swing.JTextField();
        jPanel15 = new javax.swing.JPanel();
        jPanel18 = new javax.swing.JPanel();
        jLabel26 = new javax.swing.JLabel();
        jLabel27 = new javax.swing.JLabel();
        thresholdMutationRateField = new javax.swing.JTextField();
        maxThresholdExchangeFactorValueField = new javax.swing.JTextField();
        jPanel16 = new javax.swing.JPanel();
        jLabel28 = new javax.swing.JLabel();
        jLabel29 = new javax.swing.JLabel();
        weightsMutationRateField = new javax.swing.JTextField();
        maxWeightExchangevalueField = new javax.swing.JTextField();
        jPanel17 = new javax.swing.JPanel();
        jLabel30 = new javax.swing.JLabel();
        jLabel31 = new javax.swing.JLabel();
        connectionMutationRateField = new javax.swing.JTextField();
        disconnectionMutationRateField = new javax.swing.JTextField();
        jPanel19 = new javax.swing.JPanel();
        jLabel32 = new javax.swing.JLabel();
        jLabel33 = new javax.swing.JLabel();
        receiverNeuronNumberMutationRateField = new javax.swing.JTextField();
        responseNeuronNumberMutationRateField = new javax.swing.JTextField();
        jMenuBar1 = new javax.swing.JMenuBar();
        fileMenu = new javax.swing.JMenu();
        newConfigurationJMenuItem = new javax.swing.JMenuItem();
        openMenuItem = new javax.swing.JMenuItem();
        saveMenuItem = new javax.swing.JMenuItem();
        saveAsMenuItem = new javax.swing.JMenuItem();
        saveAsDefaultMenutem = new javax.swing.JMenuItem();
        jSeparator1 = new javax.swing.JPopupMenu.Separator();
        saveEvolutionMenuItem = new javax.swing.JMenuItem();
        loadEvolutionMenuItem = new javax.swing.JMenuItem();
        jSeparator3 = new javax.swing.JPopupMenu.Separator();
        exitMenuItem = new javax.swing.JMenuItem();
        runMenu = new javax.swing.JMenu();
        runEvolveProcessMenuItem = new javax.swing.JMenuItem();
        stopEvolveProcessMenuItem = new javax.swing.JMenuItem();
        jSeparator2 = new javax.swing.JPopupMenu.Separator();
        cancelEvolveProcessMenuItem = new javax.swing.JMenuItem();
        ViewMenu = new javax.swing.JMenu();
        viewConfigMenuItem = new javax.swing.JMenuItem();
        viewEvolutionGraphicMenuItem = new javax.swing.JMenuItem();
        viewPopuplationDetailMenuItem = new javax.swing.JMenuItem();
        helpMenu = new javax.swing.JMenu();
        contentMenuItem = new javax.swing.JMenuItem();
        aboutMenuItem = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setSize(new java.awt.Dimension(0, 0));

        jPanel20.setPreferredSize(new java.awt.Dimension(1000, 24));

        jToolBar1.setRollover(true);

        openConfigButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/json-icon-16x16-25bn37hi.png"))); // NOI18N
        openConfigButton.setToolTipText("Open config file");
        openConfigButton.setFocusable(false);
        openConfigButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        openConfigButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        openConfigButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                openConfigButtonActionPerformed(evt);
            }
        });
        jToolBar1.add(openConfigButton);

        saveConfigButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/save-icon-16x16-2viu8b8q.png"))); // NOI18N
        saveConfigButton.setToolTipText("save config file");
        saveConfigButton.setFocusable(false);
        saveConfigButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        saveConfigButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        saveConfigButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveConfigButtonActionPerformed(evt);
            }
        });
        jToolBar1.add(saveConfigButton);

        runButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/play-16x16-375.png"))); // NOI18N
        runButton.setToolTipText("evolve");
        runButton.setFocusable(false);
        runButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        runButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        runButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                runButtonActionPerformed(evt);
            }
        });
        jToolBar1.add(runButton);

        viewEvolveDataButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/lineChart-16x16-204535.png"))); // NOI18N
        viewEvolveDataButton.setToolTipText("view data evolution process");
        viewEvolveDataButton.setFocusable(false);
        viewEvolveDataButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        viewEvolveDataButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        viewEvolveDataButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                viewEvolveDataButtonActionPerformed(evt);
            }
        });
        jToolBar1.add(viewEvolveDataButton);

        loadEvolveDataButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/loadLineChart-16x16-204535.png"))); // NOI18N
        loadEvolveDataButton.setToolTipText("load data from saved evolution process");
        loadEvolveDataButton.setFocusable(false);
        loadEvolveDataButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        loadEvolveDataButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        loadEvolveDataButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                loadEvolveDataButtonActionPerformed(evt);
            }
        });
        jToolBar1.add(loadEvolveDataButton);

        saveEvolveDataButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/saveLineChart-16x16-204535.png"))); // NOI18N
        saveEvolveDataButton.setToolTipText("save data of current evolution process");
        saveEvolveDataButton.setEnabled(false);
        saveEvolveDataButton.setFocusable(false);
        saveEvolveDataButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        saveEvolveDataButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        saveEvolveDataButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveEvolveDataButtonActionPerformed(evt);
            }
        });
        jToolBar1.add(saveEvolveDataButton);

        viewAgentDetailsButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/xarxa_nodes_16x16.png"))); // NOI18N
        viewAgentDetailsButton.setFocusable(false);
        viewAgentDetailsButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        viewAgentDetailsButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        viewAgentDetailsButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                viewAgentDetailsButtonActionPerformed(evt);
            }
        });
        jToolBar1.add(viewAgentDetailsButton);

        loadAgentDetailsButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/load_xarxa_nodes_16x16.png"))); // NOI18N
        loadAgentDetailsButton.setFocusable(false);
        loadAgentDetailsButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        loadAgentDetailsButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        loadAgentDetailsButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                loadAgentDetailsButtonActionPerformed(evt);
            }
        });
        jToolBar1.add(loadAgentDetailsButton);

        javax.swing.GroupLayout jPanel20Layout = new javax.swing.GroupLayout(jPanel20);
        jPanel20.setLayout(jPanel20Layout);
        jPanel20Layout.setHorizontalGroup(
            jPanel20Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jToolBar1, javax.swing.GroupLayout.DEFAULT_SIZE, 1000, Short.MAX_VALUE)
        );
        jPanel20Layout.setVerticalGroup(
            jPanel20Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel20Layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(jToolBar1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );

        getContentPane().add(jPanel20, java.awt.BorderLayout.NORTH);

        jTabbedPane1.setAutoscrolls(true);
        jTabbedPane1.setMinimumSize(new java.awt.Dimension(200, 480));
        jTabbedPane1.setPreferredSize(new java.awt.Dimension(1000, 750));

        jScrollPane1.setAutoscrolls(true);
        jScrollPane1.setPreferredSize(new java.awt.Dimension(902, 750));

        jPanel1.setAutoscrolls(true);
        jPanel1.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        jPanel1.setMinimumSize(new java.awt.Dimension(624, 550));
        jPanel1.setPreferredSize(new java.awt.Dimension(900, 580));

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder("Stop evolution process on ..."));

        jLabel1.setText("Minimum best performance:");

        minimumBestPerformanceValueLabel.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        minimumBestPerformanceValueLabel.setText("1.0");
        minimumBestPerformanceValueLabel.setMinimumSize(new java.awt.Dimension(55, 23));
        minimumBestPerformanceValueLabel.setPreferredSize(new java.awt.Dimension(55, 23));

        minimumBestPerformanceValueSlider.setFont(new java.awt.Font("Liberation Sans", 0, 13)); // NOI18N
        minimumBestPerformanceValueSlider.setMajorTickSpacing(10);
        minimumBestPerformanceValueSlider.setMinorTickSpacing(1);
        minimumBestPerformanceValueSlider.setPaintLabels(true);
        minimumBestPerformanceValueSlider.setPaintTicks(true);
        minimumBestPerformanceValueSlider.setValue(100);

        jLabel2.setText("Minimum average performance:");

        minimumAveragePerformaceValueLabel.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        minimumAveragePerformaceValueLabel.setText("0.9");
        minimumAveragePerformaceValueLabel.setMinimumSize(new java.awt.Dimension(55, 23));
        minimumAveragePerformaceValueLabel.setPreferredSize(new java.awt.Dimension(55, 23));

        minimumAveragePerformaceValueSlider.setMajorTickSpacing(10);
        minimumAveragePerformaceValueSlider.setMinorTickSpacing(1);
        minimumAveragePerformaceValueSlider.setPaintLabels(true);
        minimumAveragePerformaceValueSlider.setPaintTicks(true);
        minimumAveragePerformaceValueSlider.setValue(90);

        jLabel3.setText("Maximum cycles to process (");

        maximumEvolutionaryCyclesValueLabel.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        maximumEvolutionaryCyclesValueLabel.setText("1000");
        maximumEvolutionaryCyclesValueLabel.setToolTipText("");
        maximumEvolutionaryCyclesValueLabel.setMinimumSize(new java.awt.Dimension(55, 23));
        maximumEvolutionaryCyclesValueLabel.setPreferredSize(new java.awt.Dimension(55, 23));

        maximumEvolutionaryCyclesValueSlider.setFont(new java.awt.Font("Liberation Sans", 0, 12)); // NOI18N
        maximumEvolutionaryCyclesValueSlider.setMajorTickSpacing(500);
        maximumEvolutionaryCyclesValueSlider.setMaximum(5000);
        maximumEvolutionaryCyclesValueSlider.setMinorTickSpacing(100);
        maximumEvolutionaryCyclesValueSlider.setPaintLabels(true);
        maximumEvolutionaryCyclesValueSlider.setPaintTicks(true);
        maximumEvolutionaryCyclesValueSlider.setValue(1000);

        maximumCyclesToProcessFactorComboBox.setFont(new java.awt.Font("Liberation Sans", 0, 10)); // NOI18N
        maximumCyclesToProcessFactorComboBox.setModel(new DefaultComboBoxModel<FactorModelMinimumCyclesToProcess>(new FactorModelMinimumCyclesToProcess[] {FactorModelMinimumCyclesToProcess.FOR_THOUSAND, FactorModelMinimumCyclesToProcess.FOR_ONE}));

        jLabel40.setText(")");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel2)
                    .addComponent(jLabel1)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jLabel3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(maximumCyclesToProcessFactorComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 74, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jLabel40)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(maximumEvolutionaryCyclesValueLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 52, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(minimumAveragePerformaceValueLabel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 52, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(minimumBestPerformanceValueLabel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(minimumAveragePerformaceValueSlider, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(minimumBestPerformanceValueSlider, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(maximumEvolutionaryCyclesValueSlider, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(16, 16, 16)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(minimumBestPerformanceValueLabel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(minimumBestPerformanceValueSlider, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(minimumAveragePerformaceValueLabel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(minimumAveragePerformaceValueSlider, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(maximumEvolutionaryCyclesValueLabel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(maximumEvolutionaryCyclesValueSlider, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(maximumCyclesToProcessFactorComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel40))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel4.setLayout(new java.awt.GridLayout(1, 2));

        jPanel3.setBorder(javax.swing.BorderFactory.createTitledBorder("Evolution process conditions"));
        java.awt.GridBagLayout jPanel3Layout = new java.awt.GridBagLayout();
        jPanel3Layout.columnWeights = new double[] {0.5, 0.5};
        jPanel3Layout.rowWeights = new double[] {1.0, 1.0};
        jPanel3.setLayout(jPanel3Layout);

        optimizationMethodUsedComboBox.setModel(new DefaultComboBoxModel<org.elsquatrecaps.rsjcb.netvolution.evolutiveprocess.optimization.SurviveOptimizationMethodValues>(org.elsquatrecaps.rsjcb.netvolution.evolutiveprocess.optimization.SurviveOptimizationMethodValues.values()));

        jLabel34.setText("Survival rate value:");

        survivalRateValueTextField.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        survivalRateValueTextField.setText("50");

        jLabel35.setText("%");

        jLabel36.setText("Opt. meth. selector:");

        javax.swing.GroupLayout jPanel22Layout = new javax.swing.GroupLayout(jPanel22);
        jPanel22.setLayout(jPanel22Layout);
        jPanel22Layout.setHorizontalGroup(
            jPanel22Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel22Layout.createSequentialGroup()
                .addComponent(jLabel36)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(optimizationMethodUsedComboBox, 0, 147, Short.MAX_VALUE)
                .addGap(18, 18, 18)
                .addComponent(jLabel34)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(survivalRateValueTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(1, 1, 1)
                .addComponent(jLabel35)
                .addContainerGap())
        );
        jPanel22Layout.setVerticalGroup(
            jPanel22Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel22Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel22Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(survivalRateValueTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel34)
                    .addComponent(jLabel35)
                    .addComponent(optimizationMethodUsedComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel36))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        jPanel3.add(jPanel22, gridBagConstraints);

        jPanel6.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        jLabel5.setFont(new java.awt.Font("Liberation Sans", 1, 14)); // NOI18N
        jLabel5.setText("Reproductive advantages:");

        useNeuronDensityAsReproductiveAdvantgeCheck.setText(" 1 - Neuron connection density");

        useCalculationEficiencyAsReproductiveAdvantgeCheck.setText("Calculation eficiency");

        usePerformanceAsReproductiveAdvantgeCheck.setSelected(true);
        usePerformanceAsReproductiveAdvantgeCheck.setText("Performance");
        usePerformanceAsReproductiveAdvantgeCheck.setEnabled(false);

        javax.swing.GroupLayout jPanel6Layout = new javax.swing.GroupLayout(jPanel6);
        jPanel6.setLayout(jPanel6Layout);
        jPanel6Layout.setHorizontalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel6Layout.createSequentialGroup()
                .addContainerGap(23, Short.MAX_VALUE)
                .addComponent(jLabel5)
                .addContainerGap(60, Short.MAX_VALUE))
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(usePerformanceAsReproductiveAdvantgeCheck)
                    .addComponent(useNeuronDensityAsReproductiveAdvantgeCheck)
                    .addComponent(useCalculationEficiencyAsReproductiveAdvantgeCheck))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel6Layout.setVerticalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel5)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(usePerformanceAsReproductiveAdvantgeCheck)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(useNeuronDensityAsReproductiveAdvantgeCheck, javax.swing.GroupLayout.PREFERRED_SIZE, 21, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(useCalculationEficiencyAsReproductiveAdvantgeCheck)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        jPanel3.add(jPanel6, gridBagConstraints);

        jPanel7.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        jLabel4.setFont(new java.awt.Font("Liberation Sans", 1, 14)); // NOI18N
        jLabel4.setText("Vital advantages:");

        usePerformanceAsVitalAdvantgeCheck.setSelected(true);
        usePerformanceAsVitalAdvantgeCheck.setText("Performance");
        usePerformanceAsVitalAdvantgeCheck.setEnabled(false);

        useNeuronDensityAsVitalAdvantgeCheck.setText("1 - Neuron connection density");
        useNeuronDensityAsVitalAdvantgeCheck.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                useNeuronDensityAsVitalAdvantgeCheckActionPerformed(evt);
            }
        });

        useCalculationEficiencyAsVitalAdvantgeCheck.setText("Calculation eficiency");

        javax.swing.GroupLayout jPanel7Layout = new javax.swing.GroupLayout(jPanel7);
        jPanel7.setLayout(jPanel7Layout);
        jPanel7Layout.setHorizontalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel7Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(useCalculationEficiencyAsVitalAdvantgeCheck)
                    .addComponent(usePerformanceAsVitalAdvantgeCheck)
                    .addComponent(useNeuronDensityAsVitalAdvantgeCheck)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel7Layout.createSequentialGroup()
                        .addComponent(jLabel4)
                        .addGap(34, 34, 34)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel7Layout.setVerticalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel7Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel4)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(usePerformanceAsVitalAdvantgeCheck)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(useNeuronDensityAsVitalAdvantgeCheck)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(useCalculationEficiencyAsVitalAdvantgeCheck)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        jPanel3.add(jPanel7, gridBagConstraints);

        jPanel4.add(jPanel3);

        jPanel5.setBorder(javax.swing.BorderFactory.createTitledBorder("Data of interest"));
        jPanel5.setMinimumSize(new java.awt.Dimension(493, 50));
        jPanel5.setPreferredSize(new java.awt.Dimension(493, 248));

        jPanel9.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        jPanel9.setPreferredSize(new java.awt.Dimension(475, 50));

        followPerformanceAdvantgeCheck.setSelected(true);
        followPerformanceAdvantgeCheck.setText("Performance");
        followPerformanceAdvantgeCheck.setEnabled(false);

        followNeuronDensityAdvantgeCheck.setText("Neuron connection density");

        followCalculationEficiencyCheck.setText("Calculation eficiency");
        followCalculationEficiencyCheck.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                followCalculationEficiencyCheckActionPerformed(evt);
            }
        });

        followAverageBetaValueCheck.setText("Activation functuion linearity degree");
        followAverageBetaValueCheck.setEnabled(false);
        followAverageBetaValueCheck.setFocusable(false);

        javax.swing.GroupLayout jPanel9Layout = new javax.swing.GroupLayout(jPanel9);
        jPanel9.setLayout(jPanel9Layout);
        jPanel9Layout.setHorizontalGroup(
            jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel9Layout.createSequentialGroup()
                .addGap(32, 32, 32)
                .addGroup(jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel9Layout.createSequentialGroup()
                        .addComponent(followPerformanceAdvantgeCheck, javax.swing.GroupLayout.PREFERRED_SIZE, 114, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(102, 102, 102)
                        .addComponent(followAverageBetaValueCheck))
                    .addComponent(followCalculationEficiencyCheck, javax.swing.GroupLayout.PREFERRED_SIZE, 164, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(followNeuronDensityAdvantgeCheck, javax.swing.GroupLayout.PREFERRED_SIZE, 186, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel9Layout.setVerticalGroup(
            jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel9Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(followPerformanceAdvantgeCheck)
                    .addComponent(followAverageBetaValueCheck))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(followNeuronDensityAdvantgeCheck)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(followCalculationEficiencyCheck)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jTabbedPane2.addTab("Properties to follow dynamically", jPanel9);

        jPanel23.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        lineageRecordingCheckBox.setText("Recording");

        jLabel37.setText("Number of best progeny lines:");

        jLabel38.setText("Number of worst progeny lines:");

        numberOfBestProgenyLinesToSaveTextField.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        numberOfBestProgenyLinesToSaveTextField.setText("0");

        numberOfWorstProgenyLinesToSaveTextField.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        numberOfWorstProgenyLinesToSaveTextField.setText("0");

        javax.swing.GroupLayout jPanel23Layout = new javax.swing.GroupLayout(jPanel23);
        jPanel23.setLayout(jPanel23Layout);
        jPanel23Layout.setHorizontalGroup(
            jPanel23Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel23Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel23Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel38)
                    .addComponent(jLabel37)
                    .addComponent(lineageRecordingCheckBox))
                .addGap(18, 18, 18)
                .addGroup(jPanel23Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(numberOfWorstProgenyLinesToSaveTextField, javax.swing.GroupLayout.DEFAULT_SIZE, 266, Short.MAX_VALUE)
                    .addComponent(numberOfBestProgenyLinesToSaveTextField))
                .addContainerGap())
        );
        jPanel23Layout.setVerticalGroup(
            jPanel23Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel23Layout.createSequentialGroup()
                .addContainerGap(20, Short.MAX_VALUE)
                .addComponent(lineageRecordingCheckBox)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel23Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel37)
                    .addComponent(numberOfBestProgenyLinesToSaveTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel23Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel38)
                    .addComponent(numberOfWorstProgenyLinesToSaveTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(20, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout jPanel21Layout = new javax.swing.GroupLayout(jPanel21);
        jPanel21.setLayout(jPanel21Layout);
        jPanel21Layout.setHorizontalGroup(
            jPanel21Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel21Layout.createSequentialGroup()
                .addComponent(jPanel23, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel21Layout.setVerticalGroup(
            jPanel21Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel23, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        jTabbedPane2.addTab("Lineage saving", jPanel21);

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTabbedPane2)
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addGap(0, 0, 0)
                .addComponent(jTabbedPane2))
        );

        jPanel4.add(jPanel5);

        jPanel8.setBorder(javax.swing.BorderFactory.createTitledBorder("Evolution environment"));
        jPanel8.setMinimumSize(new java.awt.Dimension(358, 211));

        jPanel10.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        jLabel6.setText("Verification process:");

        verificationProcessList.setModel(new DefaultListModel<VerificationProcessConfiguration<? extends AbstractDataAndEditorBuilder<? extends Object>>>()
        );
        verificationProcessList.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jScrollPane2.setViewportView(verificationProcessList);

        javax.swing.GroupLayout jPanel10Layout = new javax.swing.GroupLayout(jPanel10);
        jPanel10.setLayout(jPanel10Layout);
        jPanel10Layout.setHorizontalGroup(
            jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel10Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2)
                    .addGroup(jPanel10Layout.createSequentialGroup()
                        .addComponent(jLabel6)
                        .addGap(0, 197, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel10Layout.setVerticalGroup(
            jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel10Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel6)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 223, Short.MAX_VALUE)
                .addContainerGap())
        );

        verificationEditorPane.setLayout(new java.awt.BorderLayout());

        javax.swing.GroupLayout jPanel8Layout = new javax.swing.GroupLayout(jPanel8);
        jPanel8.setLayout(jPanel8Layout);
        jPanel8Layout.setHorizontalGroup(
            jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel8Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel10, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(verificationEditorPane, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel8Layout.setVerticalGroup(
            jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel8Layout.createSequentialGroup()
                .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel10, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(verificationEditorPane, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jPanel8, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel2, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel4, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, 180, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel8, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        jScrollPane1.setViewportView(jPanel1);

        jTabbedPane1.addTab("Evolutionary system", jScrollPane1);

        jPanel11.setAutoscrolls(true);

        jPanel12.setPreferredSize(new java.awt.Dimension(500, 750));

        jLabel7.setLabelFor(populationSizeField);
        jLabel7.setText("Population size:");
        jLabel7.setToolTipText("");

        populationSizeField.setToolTipText("");
        populationSizeField.setPreferredSize(new java.awt.Dimension(171, 25));

        jLabel9.setLabelFor(inputSizeField);
        jLabel9.setText("Number of inputs:");

        inputSizeField.setPreferredSize(new java.awt.Dimension(171, 25));
        inputSizeField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                inputSizeFieldActionPerformed(evt);
            }
        });

        jLabel10.setLabelFor(outputSizeField);
        jLabel10.setText("Number of outputs:");

        outputSizeField.setPreferredSize(new java.awt.Dimension(171, 25));
        outputSizeField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                outputSizeFieldActionPerformed(evt);
            }
        });

        jLabel11.setLabelFor(inputReceiverNeuronsSizeField);
        jLabel11.setText("Number of neurons receiving inputs:");

        inputReceiverNeuronsSizeField.setPreferredSize(new java.awt.Dimension(171, 25));
        inputReceiverNeuronsSizeField.setRequestFocusEnabled(false);

        jLabel12.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel12.setLabelFor(outputResponseNeuronsSizeField);
        jLabel12.setText("<html>Number of response<br>neurons generating outputs:");

        outputResponseNeuronsSizeField.setPreferredSize(new java.awt.Dimension(171, 25));

        hasIntermediateNeuronsCheck.setText("Has intemediate neurons");

        initialNeuronSizeLabel.setLabelFor(initialNeuronSizeField);
        initialNeuronSizeLabel.setText("Initial number of neurons:");
        initialNeuronSizeLabel.setEnabled(false);

        initialNeuronSizeField.setPreferredSize(new java.awt.Dimension(171, 25));

        jLabel13.setLabelFor(inputContributionCombo);
        jLabel13.setText("Type of contribution from inputs to neurons:");

        inputContributionCombo.setModel(new DefaultComboBoxModel<InputOutputContributionValues>());
        inputContributionCombo.setPreferredSize(new java.awt.Dimension(171, 25));

        jLabel14.setLabelFor(outputContributionCombo);
        jLabel14.setText("Type of contribution from neurons to outputs:");

        outputContributionCombo.setModel(new DefaultComboBoxModel<InputOutputContributionValues>());
        outputContributionCombo.setPreferredSize(new java.awt.Dimension(171, 25));

        jLabel15.setLabelFor(initialMinWeightField);
        jLabel15.setText("Initial minimum weight:");

        jLabel16.setLabelFor(initialMaxWeightField);
        jLabel16.setText("Initial maximum weight:");

        initialMaxWeightField.setPreferredSize(new java.awt.Dimension(175, 25));
        initialMaxWeightField.setRequestFocusEnabled(false);

        javax.swing.GroupLayout jPanel12Layout = new javax.swing.GroupLayout(jPanel12);
        jPanel12.setLayout(jPanel12Layout);
        jPanel12Layout.setHorizontalGroup(
            jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel12Layout.createSequentialGroup()
                .addGroup(jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel12Layout.createSequentialGroup()
                        .addGroup(jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel7)
                            .addComponent(jLabel9))
                        .addGap(181, 181, 181)
                        .addGroup(jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(inputSizeField, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(populationSizeField, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addGroup(jPanel12Layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(hasIntermediateNeuronsCheck, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(jPanel12Layout.createSequentialGroup()
                                .addGroup(jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel14, javax.swing.GroupLayout.PREFERRED_SIZE, 268, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel15, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel13, javax.swing.GroupLayout.PREFERRED_SIZE, 268, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel16)
                                    .addComponent(initialNeuronSizeLabel))
                                .addGap(14, 14, 14)
                                .addGroup(jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(initialNeuronSizeField, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(outputContributionCombo, javax.swing.GroupLayout.Alignment.TRAILING, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(inputContributionCombo, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(initialMinWeightField)
                                    .addComponent(initialMaxWeightField, javax.swing.GroupLayout.DEFAULT_SIZE, 188, Short.MAX_VALUE)))))
                    .addGroup(jPanel12Layout.createSequentialGroup()
                        .addGroup(jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel12, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel11, javax.swing.GroupLayout.PREFERRED_SIZE, 243, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel10))
                        .addGap(40, 40, 40)
                        .addGroup(jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(inputReceiverNeuronsSizeField, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(outputSizeField, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(outputResponseNeuronsSizeField, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                .addContainerGap())
        );
        jPanel12Layout.setVerticalGroup(
            jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel12Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabel7, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(populationSizeField, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(inputSizeField, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel9))
                .addGap(18, 18, 18)
                .addGroup(jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(outputSizeField, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel10, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(18, 18, 18)
                .addGroup(jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(inputReceiverNeuronsSizeField, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel11, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(18, 18, 18)
                .addGroup(jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel12, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(outputResponseNeuronsSizeField, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(hasIntermediateNeuronsCheck, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(initialNeuronSizeLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(initialNeuronSizeField, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel13, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(inputContributionCombo, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabel14, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(outputContributionCombo, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel15, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(initialMinWeightField, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabel16, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(initialMaxWeightField, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(52, 52, 52))
        );

        jPanel13.setPreferredSize(new java.awt.Dimension(500, 350));

        jLabel8.setText("Max number of neurons:");

        neuronSizeField.setPreferredSize(new java.awt.Dimension(171, 25));

        jLabel17.setText("Type of activation function used:");

        activationFunctionCombo.setModel(new DefaultComboBoxModel<ActivationFunctionItems>());

        jLabel18.setText("<html>Number of equal values to check<br>stability for results of network:");

        jLabel19.setText("<html>Equality range of values for stability<br>checking:");

        jLabel20.setText("<html>What neurons should be used to check<br>the stability of results?");

        neuronsForStabilityCheckingCombo.setModel(new DefaultComboBoxModel<NeuronTypesForStabilityCheckingValues>()
        );

        jLabel21.setText("<html>Maximum loops to get results if network<br>never stabilize:");

        javax.swing.GroupLayout jPanel13Layout = new javax.swing.GroupLayout(jPanel13);
        jPanel13.setLayout(jPanel13Layout);
        jPanel13Layout.setHorizontalGroup(
            jPanel13Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel13Layout.createSequentialGroup()
                .addGroup(jPanel13Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel13Layout.createSequentialGroup()
                        .addGroup(jPanel13Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel18)
                            .addComponent(jLabel17, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel8, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(30, 30, 30)
                        .addGroup(jPanel13Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(activationFunctionCombo, javax.swing.GroupLayout.Alignment.TRAILING, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(loopingTimesToStabilityCheckField)
                            .addComponent(neuronSizeField, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addGroup(jPanel13Layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(jPanel13Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel20)
                            .addComponent(jLabel21)
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel13Layout.createSequentialGroup()
                                .addComponent(jLabel19, javax.swing.GroupLayout.PREFERRED_SIZE, 245, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(0, 0, Short.MAX_VALUE)))
                        .addGap(30, 30, 30)
                        .addGroup(jPanel13Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(equalityIntervalToStabilityCheckField, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(neuronsForStabilityCheckingCombo, javax.swing.GroupLayout.Alignment.TRAILING, 0, 208, Short.MAX_VALUE)
                            .addComponent(maxLoopsForResultsField, javax.swing.GroupLayout.Alignment.TRAILING))))
                .addContainerGap())
        );
        jPanel13Layout.setVerticalGroup(
            jPanel13Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel13Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel13Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(neuronSizeField, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel13Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel17, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(activationFunctionCombo, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel13Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(loopingTimesToStabilityCheckField, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel18, javax.swing.GroupLayout.DEFAULT_SIZE, 43, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel13Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel19, javax.swing.GroupLayout.DEFAULT_SIZE, 47, Short.MAX_VALUE)
                    .addComponent(equalityIntervalToStabilityCheckField, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel13Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(neuronsForStabilityCheckingCombo, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel20, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel13Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabel21)
                    .addComponent(maxLoopsForResultsField, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(33, Short.MAX_VALUE))
        );

        jPanel14.setBorder(javax.swing.BorderFactory.createTitledBorder("Neuron connectivity"));
        jPanel14.setPreferredSize(new java.awt.Dimension(500, 300));

        jLabel22.setText("<html>Forward connection probability<br>between neurons:");

        jLabel23.setText("<html>Backward connection probability<br>between neurons:");

        jLabel24.setText("<html>Contribution probability from inputs<br>to receiver neurons:");

        jLabel25.setText("<html>Contribution probability from response<br>neurons to outputs:");

        javax.swing.GroupLayout jPanel14Layout = new javax.swing.GroupLayout(jPanel14);
        jPanel14.setLayout(jPanel14Layout);
        jPanel14Layout.setHorizontalGroup(
            jPanel14Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel14Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel14Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel14Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addComponent(jLabel24, javax.swing.GroupLayout.DEFAULT_SIZE, 239, Short.MAX_VALUE)
                        .addComponent(jLabel22)
                        .addComponent(jLabel23))
                    .addComponent(jLabel25, javax.swing.GroupLayout.PREFERRED_SIZE, 245, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(27, 27, 27)
                .addGroup(jPanel14Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel14Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addComponent(inputContributionrobabilityField, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 207, Short.MAX_VALUE)
                        .addComponent(connectionProbabilityBackwardInterNeuronField, javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(connectionProbabilityForwardInterNeuronField, javax.swing.GroupLayout.Alignment.LEADING))
                    .addComponent(outputContributionProbabilityField, javax.swing.GroupLayout.PREFERRED_SIZE, 207, javax.swing.GroupLayout.PREFERRED_SIZE)))
        );
        jPanel14Layout.setVerticalGroup(
            jPanel14Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel14Layout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addGroup(jPanel14Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel22, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(connectionProbabilityForwardInterNeuronField, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel14Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel23, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(connectionProbabilityBackwardInterNeuronField, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel14Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel24, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(inputContributionrobabilityField, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel14Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel25, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(outputContributionProbabilityField, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(52, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout jPanel11Layout = new javax.swing.GroupLayout(jPanel11);
        jPanel11.setLayout(jPanel11Layout);
        jPanel11Layout.setHorizontalGroup(
            jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel11Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel12, javax.swing.GroupLayout.PREFERRED_SIZE, 482, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(12, 12, 12)
                .addGroup(jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jPanel13, javax.swing.GroupLayout.DEFAULT_SIZE, 495, Short.MAX_VALUE)
                    .addComponent(jPanel14, javax.swing.GroupLayout.DEFAULT_SIZE, 495, Short.MAX_VALUE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel11Layout.setVerticalGroup(
            jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel11Layout.createSequentialGroup()
                .addGap(10, 10, 10)
                .addGroup(jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel12, javax.swing.GroupLayout.DEFAULT_SIZE, 705, Short.MAX_VALUE)
                    .addGroup(jPanel11Layout.createSequentialGroup()
                        .addComponent(jPanel13, javax.swing.GroupLayout.PREFERRED_SIZE, 381, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jPanel14, javax.swing.GroupLayout.PREFERRED_SIZE, 318, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))))
        );

        jTabbedPane1.addTab("ANN generation", jPanel11);

        jPanel15.setPreferredSize(new java.awt.Dimension(1000, 550));
        jPanel15.setLayout(new java.awt.GridLayout(2, 2));

        jPanel18.setBorder(javax.swing.BorderFactory.createTitledBorder("Activation function changes"));

        jLabel26.setText("Linearity changing rate:");

        jLabel27.setText("Linearity max increment:");

        javax.swing.GroupLayout jPanel18Layout = new javax.swing.GroupLayout(jPanel18);
        jPanel18.setLayout(jPanel18Layout);
        jPanel18Layout.setHorizontalGroup(
            jPanel18Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel18Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel18Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel26)
                    .addComponent(jLabel27))
                .addGap(129, 129, 129)
                .addGroup(jPanel18Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(thresholdMutationRateField)
                    .addComponent(maxThresholdExchangeFactorValueField, javax.swing.GroupLayout.DEFAULT_SIZE, 206, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel18Layout.setVerticalGroup(
            jPanel18Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel18Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel18Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel26)
                    .addComponent(thresholdMutationRateField, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel18Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel27)
                    .addComponent(maxThresholdExchangeFactorValueField, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel15.add(jPanel18);

        jPanel16.setBorder(javax.swing.BorderFactory.createTitledBorder("Weight changes"));

        jLabel28.setText("Neuronal weight changing rate:");

        jLabel29.setText("Neuronal weight maximum increment:");

        javax.swing.GroupLayout jPanel16Layout = new javax.swing.GroupLayout(jPanel16);
        jPanel16.setLayout(jPanel16Layout);
        jPanel16Layout.setHorizontalGroup(
            jPanel16Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel16Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel16Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel28)
                    .addComponent(jLabel29))
                .addGap(55, 55, 55)
                .addGroup(jPanel16Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(weightsMutationRateField)
                    .addComponent(maxWeightExchangevalueField, javax.swing.GroupLayout.DEFAULT_SIZE, 205, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel16Layout.setVerticalGroup(
            jPanel16Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel16Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel16Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel28)
                    .addComponent(weightsMutationRateField, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, Short.MAX_VALUE)
                .addGroup(jPanel16Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel29)
                    .addComponent(maxWeightExchangevalueField, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel15.add(jPanel16);

        jPanel17.setBorder(javax.swing.BorderFactory.createTitledBorder("Connectivity neuron changes"));

        jLabel30.setText("Neuronal connection rate:");

        jLabel31.setText("Neuronal disconnection rate:");

        javax.swing.GroupLayout jPanel17Layout = new javax.swing.GroupLayout(jPanel17);
        jPanel17.setLayout(jPanel17Layout);
        jPanel17Layout.setHorizontalGroup(
            jPanel17Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel17Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel17Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabel30, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel31, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(108, 108, 108)
                .addGroup(jPanel17Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(disconnectionMutationRateField)
                    .addComponent(connectionMutationRateField, javax.swing.GroupLayout.DEFAULT_SIZE, 205, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel17Layout.setVerticalGroup(
            jPanel17Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel17Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel17Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel30)
                    .addComponent(connectionMutationRateField, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel17Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel31)
                    .addComponent(disconnectionMutationRateField, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel15.add(jPanel17);

        jPanel19.setBorder(javax.swing.BorderFactory.createTitledBorder("Response and receiver neurons change"));

        jLabel32.setText("<html>Rate for contribution from inputs to<br>receiver neurons:");

        jLabel33.setText("<html>Rate for contribution from response<br>neurons to outputs:");

        javax.swing.GroupLayout jPanel19Layout = new javax.swing.GroupLayout(jPanel19);
        jPanel19.setLayout(jPanel19Layout);
        jPanel19Layout.setHorizontalGroup(
            jPanel19Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel19Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel19Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel32, javax.swing.GroupLayout.PREFERRED_SIZE, 239, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel33, javax.swing.GroupLayout.PREFERRED_SIZE, 239, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(38, 38, 38)
                .addGroup(jPanel19Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(receiverNeuronNumberMutationRateField)
                    .addComponent(responseNeuronNumberMutationRateField, javax.swing.GroupLayout.DEFAULT_SIZE, 201, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel19Layout.setVerticalGroup(
            jPanel19Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel19Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel19Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel32, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(receiverNeuronNumberMutationRateField, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel19Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel33, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(responseNeuronNumberMutationRateField, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel15.add(jPanel19);

        jTabbedPane1.addTab("ANN mutation", jPanel15);

        getContentPane().add(jTabbedPane1, java.awt.BorderLayout.CENTER);

        fileMenu.setMnemonic('f');
        fileMenu.setText("File");

        newConfigurationJMenuItem.setText("New configuration");
        newConfigurationJMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                newConfigurationJMenuItemActionPerformed(evt);
            }
        });
        fileMenu.add(newConfigurationJMenuItem);

        openMenuItem.setMnemonic('o');
        openMenuItem.setText("Open configuration");
        openMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                openMenuItemActionPerformed(evt);
            }
        });
        fileMenu.add(openMenuItem);

        saveMenuItem.setMnemonic('s');
        saveMenuItem.setText("Save configuration");
        saveMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveMenuItemActionPerformed(evt);
            }
        });
        fileMenu.add(saveMenuItem);

        saveAsMenuItem.setMnemonic('a');
        saveAsMenuItem.setText("Save configuration As ...");
        saveAsMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveAsMenuItemActionPerformed(evt);
            }
        });
        fileMenu.add(saveAsMenuItem);

        saveAsDefaultMenutem.setText("Save configuration as default");
        saveAsDefaultMenutem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveAsDefaultMenutemActionPerformed(evt);
            }
        });
        fileMenu.add(saveAsDefaultMenutem);

        jSeparator1.setName(""); // NOI18N
        fileMenu.add(jSeparator1);

        saveEvolutionMenuItem.setText("Save evolution data");
        saveEvolutionMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveEvolutionMenuItemActionPerformed(evt);
            }
        });
        fileMenu.add(saveEvolutionMenuItem);

        loadEvolutionMenuItem.setText("Load evolution data");
        loadEvolutionMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                loadEvolutionMenuItemActionPerformed(evt);
            }
        });
        fileMenu.add(loadEvolutionMenuItem);
        fileMenu.add(jSeparator3);

        exitMenuItem.setMnemonic('x');
        exitMenuItem.setText("Exit");
        exitMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exitMenuItemActionPerformed(evt);
            }
        });
        fileMenu.add(exitMenuItem);

        jMenuBar1.add(fileMenu);

        runMenu.setText("Run");

        runEvolveProcessMenuItem.setText("Run evolution process");
        runEvolveProcessMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                runEvolveProcessMenuItemActionPerformed(evt);
            }
        });
        runMenu.add(runEvolveProcessMenuItem);

        stopEvolveProcessMenuItem.setText("Stop evolution process");
        runMenu.add(stopEvolveProcessMenuItem);
        runMenu.add(jSeparator2);

        cancelEvolveProcessMenuItem.setText("Cancel evolution process");
        runMenu.add(cancelEvolveProcessMenuItem);

        jMenuBar1.add(runMenu);

        ViewMenu.setText("View");

        viewConfigMenuItem.setText("config data");
        ViewMenu.add(viewConfigMenuItem);

        viewEvolutionGraphicMenuItem.setText("evoljtion process data (text and graphic)");
        viewEvolutionGraphicMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                viewEvolutionGraphicMenuItemActionPerformed(evt);
            }
        });
        ViewMenu.add(viewEvolutionGraphicMenuItem);

        viewPopuplationDetailMenuItem.setText("neural agents detail");
        viewPopuplationDetailMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                viewPopuplationDetailMenuItemActionPerformed(evt);
            }
        });
        ViewMenu.add(viewPopuplationDetailMenuItem);

        jMenuBar1.add(ViewMenu);

        helpMenu.setMnemonic('h');
        helpMenu.setText("Help");

        contentMenuItem.setMnemonic('c');
        contentMenuItem.setText("Contents");
        contentMenuItem.setEnabled(false);
        contentMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                contentMenuItemActionPerformed(evt);
            }
        });
        helpMenu.add(contentMenuItem);

        aboutMenuItem.setMnemonic('a');
        aboutMenuItem.setText("About");
        aboutMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                aboutMenuItemActionPerformed(evt);
            }
        });
        helpMenu.add(aboutMenuItem);

        jMenuBar1.add(helpMenu);

        setJMenuBar(jMenuBar1);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void newConfigurationJMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_newConfigurationJMenuItemActionPerformed
        openConfigFile(getDefaultFileNameConfig());
    }//GEN-LAST:event_newConfigurationJMenuItemActionPerformed

    private void saveAsDefaultMenutemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveAsDefaultMenutemActionPerformed
        // TODO add your handling code here:
        setFileConfigName(getDefaultFileNameConfig());
        updateConfigWithGuiData();
        getMenuEvents().saveConfigItemEvent(getJsonConfigData(), getFileConfigName());        
    }//GEN-LAST:event_saveAsDefaultMenutemActionPerformed

    private void exitMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exitMenuItemActionPerformed
//        System.exit(0);
        this.setVisible(false);
    }//GEN-LAST:event_exitMenuItemActionPerformed

    private void openMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_openMenuItemActionPerformed
        // TODO add your handling code here:
         getMenuEvents().selectAndOpenConfigItemEvent((fAndCont) -> {
            this.setJsonConfigData(fAndCont.getContent());
            this.setFileConfigName(fAndCont.getFileName());
            updateGuiWithConfigData();
            return null;
        });
    }//GEN-LAST:event_openMenuItemActionPerformed

    private void openConfigFile(String file){
        setFileConfigName(file);
        getMenuEvents().openConfigItemEvent((content) -> {
            this.setJsonConfigData(content);
            updateGuiWithConfigData();
//            activationFunctionSelected = getActivationFunctionInstanceFromList(jsonConfigData.get("AnnBuilding").get("typeOfActivationFunction").asText());
            return null;
        }, getFileConfigName());

    }
    
    private void saveMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveMenuItemActionPerformed
        // TODO add your handling code here:
        if(getFileConfigName()==null){
            setFileConfigName(getDefaultFileNameConfig());
        }
        updateConfigWithGuiData();
        getMenuEvents().saveConfigItemEvent(getJsonConfigData(), getFileConfigName());        
    }//GEN-LAST:event_saveMenuItemActionPerformed

    private void saveAsMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveAsMenuItemActionPerformed
        // TODO add your handling code here:
        updateConfigWithGuiData();
        getMenuEvents().saveConfigAsItemEvent(getJsonConfigData(), (fname) -> {
            this.setFileConfigName(fname);
            return null;
        });
    }//GEN-LAST:event_saveAsMenuItemActionPerformed

    private void contentMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_contentMenuItemActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_contentMenuItemActionPerformed

    private void aboutMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_aboutMenuItemActionPerformed
        // TODO add your handling code here:
        getMenuEvents().aboutItemEvent();
    }//GEN-LAST:event_aboutMenuItemActionPerformed

    private void saveConfigButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveConfigButtonActionPerformed
        // TODO add your handling code here:
        saveAsMenuItemActionPerformed(evt);
        updateViewForControls();
    }//GEN-LAST:event_saveConfigButtonActionPerformed

    private void openConfigButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_openConfigButtonActionPerformed
        // TODO add your handling code here:
        openMenuItemActionPerformed(evt);
        updateViewForControls();
    }//GEN-LAST:event_openConfigButtonActionPerformed

    private void runButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_runButtonActionPerformed
        // TODO add your handling code here:
        updateConfigWithGuiData();
//        if(this.getSharedData().frames.containsKey(CntFrames.EVOLUTION_PROCESS)){
//            this.getSharedData().frames.remove(CntFrames.EVOLUTION_PROCESS, this.getSharedData().frames.get(CntFrames.EVOLUTION_PROCESS));
//        }
        this.getMenuEvents().createAndShowEvolutionaryProcessFrame(this.getSharedData(), this.getActivationFunctionInstanceSelected(), false);
        this.setVisible(false);        
        
//        this.setVisible(false);
//        EvolutionProcessFrame prg = new EvolutionProcessFrame(this.getSharedData());
//        this.getEvolutionFrames().put(CntFrames.EVOLUTION_PROCESS, prg);
//        java.awt.EventQueue.invokeLater(() -> {
//            prg.setPreferredSize(new Dimension(1256, 780));
//            prg.pack();
//            prg.init(getActivationFunctionInstanceSelected(), false);
//            prg.setVisible(true);
//        });        
    }//GEN-LAST:event_runButtonActionPerformed

    private void inputSizeFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_inputSizeFieldActionPerformed
        // TODO add your handling code here:
        if(inputContributionCombo.getSelectedItem().equals(InputOutputContributionValues.SEPARATED_CONTRIBUTION)){
            inputReceiverNeuronsSizeField.setText(inputSizeField.getText());
        }else if(inputContributionCombo.getSelectedItem().equals(InputOutputContributionValues.ONE_TO_MANY_CONTRIBUTION)){
            int o = Integer.valueOf(inputSizeField.getText());
            int rn = Integer.valueOf(inputReceiverNeuronsSizeField.getText());
            if(rn>o){
                inputReceiverNeuronsSizeField.setText(inputSizeField.getText());
            }
        }
    }//GEN-LAST:event_inputSizeFieldActionPerformed

    private void outputSizeFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_outputSizeFieldActionPerformed
        // TODO add your handling code here:
        if(outputContributionCombo.getSelectedItem().equals(InputOutputContributionValues.SEPARATED_CONTRIBUTION)){
            outputResponseNeuronsSizeField.setText(outputSizeField.getText());
        }else if(outputContributionCombo.getSelectedItem().equals(InputOutputContributionValues.ONE_TO_MANY_CONTRIBUTION)){
            int o = Integer.valueOf(outputSizeField.getText());
            int rn = Integer.valueOf(outputResponseNeuronsSizeField.getText());
            if(rn<o){
                outputResponseNeuronsSizeField.setText(outputSizeField.getText());
            }
        }
    }//GEN-LAST:event_outputSizeFieldActionPerformed

    private void saveEvolveDataButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveEvolveDataButtonActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_saveEvolveDataButtonActionPerformed

    private void loadEvolveDataButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_loadEvolveDataButtonActionPerformed
        this.getMenuEvents().loadDataItemEvent(new File(getDisplayedDataFilename()), getSharedData());
        this.setActivationFunction(this.getActivationFunctionInstanceSelected());
        this.getMenuEvents().createAndShowEvolutionaryProcessFrame(this.getSharedData());
        this.setVisible(false);
//        EvolutionProcessFrame prg;
//        this.getMenuEvents().loadDataItemEvent(new File(getDisplayedDataFilename()), getSharedData());
//        if(getSharedData().frames.containsKey(CntFrames.EVOLUTION_PROCESS)){
//            prg = (EvolutionProcessFrame) getSharedData().frames.get(CntFrames.EVOLUTION_PROCESS);
//        }else{
//            prg = new EvolutionProcessFrame(this.getSharedData());
//            this.getEvolutionFrames().put(CntFrames.EVOLUTION_PROCESS, prg);
//            prg.setVisible(false);
//            prg.setPreferredSize(new Dimension(1256, 780));
//            prg.pack();
//        }
//        this.setVisible(false);
//        java.awt.EventQueue.invokeLater(() -> {
//            prg.init(getActivationFunctionInstanceSelected(), true);
//            prg.setVisible(true);
//        });        


    }//GEN-LAST:event_loadEvolveDataButtonActionPerformed

    private void loadAgentDetailsButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_loadAgentDetailsButtonActionPerformed
        // TODO add your handling code here:
        this.getMenuEvents().loadDataItemEvent(new File(getDisplayedDataFilename()), getSharedData());
        this.setActivationFunction(this.getActivationFunctionInstanceSelected());
        this.getMenuEvents().createAndShowPopulationDetailFrame(this.getSharedData());
        this.setVisible(false);

//        PopulationDetailFrame prg;
//        this.getMenuEvents().loadDataItemEvent(new File(getDisplayedDataFilename()), getSharedData());
//        if(getSharedData().frames.containsKey(CntFrames.EVOLUTION_PROCESS)){
//            prg = (PopulationDetailFrame) getSharedData().frames.get(CntFrames.POPULATION_DETAIL);
//        }else{
//            prg = new PopulationDetailFrame(this.getSharedData());
//            this.getEvolutionFrames().put(CntFrames.POPULATION_DETAIL, prg);
//            prg.setVisible(false);
//            prg.setPreferredSize(new Dimension(1256, 780));
//            prg.pack();
//        }
//        java.awt.EventQueue.invokeLater(() -> {
//            prg.init();
//            prg.setVisible(true);
//        });        
//        this.setVisible(false);
    }//GEN-LAST:event_loadAgentDetailsButtonActionPerformed

    private void viewEvolveDataButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_viewEvolveDataButtonActionPerformed
        // TODO add your handling code here:
        this.setActivationFunction(this.getActivationFunctionInstanceSelected());
        this.getMenuEvents().createAndShowEvolutionaryProcessFrame(this.getSharedData());
        this.setVisible(false);
    }//GEN-LAST:event_viewEvolveDataButtonActionPerformed

    private void viewAgentDetailsButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_viewAgentDetailsButtonActionPerformed
        // TODO add your handling code here:
        this.setActivationFunction(this.getActivationFunctionInstanceSelected());
        this.getMenuEvents().createAndShowPopulationDetailFrame(this.getSharedData());
        this.setVisible(false);
    }//GEN-LAST:event_viewAgentDetailsButtonActionPerformed

    private void saveEvolutionMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveEvolutionMenuItemActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_saveEvolutionMenuItemActionPerformed

    private void loadEvolutionMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_loadEvolutionMenuItemActionPerformed
        // TODO add your handling code here:
        loadEvolveDataButtonActionPerformed(evt);
    }//GEN-LAST:event_loadEvolutionMenuItemActionPerformed

    private void runEvolveProcessMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_runEvolveProcessMenuItemActionPerformed
        // TODO add your handling code here:
        runButtonActionPerformed(evt);
    }//GEN-LAST:event_runEvolveProcessMenuItemActionPerformed

    private void viewEvolutionGraphicMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_viewEvolutionGraphicMenuItemActionPerformed
        // TODO add your handling code here:
        viewEvolveDataButtonActionPerformed(evt);
    }//GEN-LAST:event_viewEvolutionGraphicMenuItemActionPerformed

    private void viewPopuplationDetailMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_viewPopuplationDetailMenuItemActionPerformed
        // TODO add your handling code here:
        viewAgentDetailsButtonActionPerformed(evt);
    }//GEN-LAST:event_viewPopuplationDetailMenuItemActionPerformed

    private void useNeuronDensityAsVitalAdvantgeCheckActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_useNeuronDensityAsVitalAdvantgeCheckActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_useNeuronDensityAsVitalAdvantgeCheckActionPerformed

    private void followCalculationEficiencyCheckActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_followCalculationEficiencyCheckActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_followCalculationEficiencyCheckActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ConfigurationSystemFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ConfigurationSystemFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ConfigurationSystemFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ConfigurationSystemFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> {
            ConfigurationSystemFrame prg = new ConfigurationSystemFrame();
            prg.setPreferredSize(new Dimension(1126, 780));
            prg.pack();
            prg.setVisible(true);
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenu ViewMenu;
    private javax.swing.JMenuItem aboutMenuItem;
    private javax.swing.JComboBox<ActivationFunctionItems> activationFunctionCombo;
    private javax.swing.JMenuItem cancelEvolveProcessMenuItem;
    private javax.swing.JTextField connectionMutationRateField;
    private javax.swing.JTextField connectionProbabilityBackwardInterNeuronField;
    private javax.swing.JTextField connectionProbabilityForwardInterNeuronField;
    private javax.swing.JMenuItem contentMenuItem;
    private javax.swing.JTextField disconnectionMutationRateField;
    private javax.swing.JTextField equalityIntervalToStabilityCheckField;
    private javax.swing.JMenuItem exitMenuItem;
    private javax.swing.JMenu fileMenu;
    private javax.swing.JCheckBox followAverageBetaValueCheck;
    private javax.swing.JCheckBox followCalculationEficiencyCheck;
    private javax.swing.JCheckBox followNeuronDensityAdvantgeCheck;
    private javax.swing.JCheckBox followPerformanceAdvantgeCheck;
    private javax.swing.JCheckBox hasIntermediateNeuronsCheck;
    private javax.swing.JMenu helpMenu;
    private javax.swing.JTextField initialMaxWeightField;
    private javax.swing.JTextField initialMinWeightField;
    private javax.swing.JTextField initialNeuronSizeField;
    private javax.swing.JLabel initialNeuronSizeLabel;
    private javax.swing.JComboBox<InputOutputContributionValues> inputContributionCombo;
    private javax.swing.JTextField inputContributionrobabilityField;
    private javax.swing.JTextField inputReceiverNeuronsSizeField;
    private javax.swing.JTextField inputSizeField;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel20;
    private javax.swing.JLabel jLabel21;
    private javax.swing.JLabel jLabel22;
    private javax.swing.JLabel jLabel23;
    private javax.swing.JLabel jLabel24;
    private javax.swing.JLabel jLabel25;
    private javax.swing.JLabel jLabel26;
    private javax.swing.JLabel jLabel27;
    private javax.swing.JLabel jLabel28;
    private javax.swing.JLabel jLabel29;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel30;
    private javax.swing.JLabel jLabel31;
    private javax.swing.JLabel jLabel32;
    private javax.swing.JLabel jLabel33;
    private javax.swing.JLabel jLabel34;
    private javax.swing.JLabel jLabel35;
    private javax.swing.JLabel jLabel36;
    private javax.swing.JLabel jLabel37;
    private javax.swing.JLabel jLabel38;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel40;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel10;
    private javax.swing.JPanel jPanel11;
    private javax.swing.JPanel jPanel12;
    private javax.swing.JPanel jPanel13;
    private javax.swing.JPanel jPanel14;
    private javax.swing.JPanel jPanel15;
    private javax.swing.JPanel jPanel16;
    private javax.swing.JPanel jPanel17;
    private javax.swing.JPanel jPanel18;
    private javax.swing.JPanel jPanel19;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel20;
    private javax.swing.JPanel jPanel21;
    private javax.swing.JPanel jPanel22;
    private javax.swing.JPanel jPanel23;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JPanel jPanel8;
    private javax.swing.JPanel jPanel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JPopupMenu.Separator jSeparator1;
    private javax.swing.JPopupMenu.Separator jSeparator2;
    private javax.swing.JPopupMenu.Separator jSeparator3;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JTabbedPane jTabbedPane2;
    private javax.swing.JToolBar jToolBar1;
    private javax.swing.JCheckBox lineageRecordingCheckBox;
    private javax.swing.JButton loadAgentDetailsButton;
    private javax.swing.JMenuItem loadEvolutionMenuItem;
    private javax.swing.JButton loadEvolveDataButton;
    private javax.swing.JTextField loopingTimesToStabilityCheckField;
    private javax.swing.JTextField maxLoopsForResultsField;
    private javax.swing.JTextField maxThresholdExchangeFactorValueField;
    private javax.swing.JTextField maxWeightExchangevalueField;
    private javax.swing.JComboBox<FactorModelMinimumCyclesToProcess> maximumCyclesToProcessFactorComboBox;
    private javax.swing.JTextField maximumEvolutionaryCyclesValueLabel;
    private javax.swing.JSlider maximumEvolutionaryCyclesValueSlider;
    private javax.swing.JTextField minimumAveragePerformaceValueLabel;
    private javax.swing.JSlider minimumAveragePerformaceValueSlider;
    private javax.swing.JTextField minimumBestPerformanceValueLabel;
    private javax.swing.JSlider minimumBestPerformanceValueSlider;
    private javax.swing.JTextField neuronSizeField;
    private javax.swing.JComboBox<NeuronTypesForStabilityCheckingValues> neuronsForStabilityCheckingCombo;
    private javax.swing.JMenuItem newConfigurationJMenuItem;
    private javax.swing.JTextField numberOfBestProgenyLinesToSaveTextField;
    private javax.swing.JTextField numberOfWorstProgenyLinesToSaveTextField;
    private javax.swing.JButton openConfigButton;
    private javax.swing.JMenuItem openMenuItem;
    private javax.swing.JComboBox<org.elsquatrecaps.rsjcb.netvolution.evolutiveprocess.optimization.SurviveOptimizationMethodValues> optimizationMethodUsedComboBox;
    private javax.swing.JComboBox<InputOutputContributionValues> outputContributionCombo;
    private javax.swing.JTextField outputContributionProbabilityField;
    private javax.swing.JTextField outputResponseNeuronsSizeField;
    private javax.swing.JTextField outputSizeField;
    private javax.swing.JTextField populationSizeField;
    private javax.swing.JTextField receiverNeuronNumberMutationRateField;
    private javax.swing.JTextField responseNeuronNumberMutationRateField;
    private javax.swing.JButton runButton;
    private javax.swing.JMenuItem runEvolveProcessMenuItem;
    private javax.swing.JMenu runMenu;
    private javax.swing.JMenuItem saveAsDefaultMenutem;
    private javax.swing.JMenuItem saveAsMenuItem;
    private javax.swing.JButton saveConfigButton;
    private javax.swing.JMenuItem saveEvolutionMenuItem;
    private javax.swing.JButton saveEvolveDataButton;
    private javax.swing.JMenuItem saveMenuItem;
    private javax.swing.JMenuItem stopEvolveProcessMenuItem;
    private javax.swing.JTextField survivalRateValueTextField;
    private javax.swing.JTextField thresholdMutationRateField;
    private javax.swing.JCheckBox useCalculationEficiencyAsReproductiveAdvantgeCheck;
    private javax.swing.JCheckBox useCalculationEficiencyAsVitalAdvantgeCheck;
    private javax.swing.JCheckBox useNeuronDensityAsReproductiveAdvantgeCheck;
    private javax.swing.JCheckBox useNeuronDensityAsVitalAdvantgeCheck;
    private javax.swing.JCheckBox usePerformanceAsReproductiveAdvantgeCheck;
    private javax.swing.JCheckBox usePerformanceAsVitalAdvantgeCheck;
    private javax.swing.JPanel verificationEditorPane;
    private javax.swing.JList<VerificationProcessConfiguration<? extends AbstractDataAndEditorBuilder<? extends Object>>> verificationProcessList;
    private javax.swing.JButton viewAgentDetailsButton;
    private javax.swing.JMenuItem viewConfigMenuItem;
    private javax.swing.JMenuItem viewEvolutionGraphicMenuItem;
    private javax.swing.JButton viewEvolveDataButton;
    private javax.swing.JMenuItem viewPopuplationDetailMenuItem;
    private javax.swing.JTextField weightsMutationRateField;
    // End of variables declaration//GEN-END:variables

    private void moreInitComponents() {
        Dictionary<Integer,JLabel> labelTable = new Hashtable<>();
        labelTable.put(100, new JLabel("1.0"));
        labelTable.put(90, new JLabel("0.9"));
        labelTable.put(80, new JLabel("0.8"));
        labelTable.put(70, new JLabel("0.7"));
        labelTable.put(60, new JLabel("0.6"));
        labelTable.put(50, new JLabel("0.5"));
        labelTable.put(40, new JLabel("0.4"));
        labelTable.put(30, new JLabel("0.3"));
        labelTable.put(20, new JLabel("0.2"));
        labelTable.put(10, new JLabel("0.1"));
        labelTable.put(0, new JLabel("0.0"));
        this.minimumBestPerformanceValueSlider.setLabelTable(labelTable);
        this.minimumAveragePerformaceValueSlider.setLabelTable(labelTable);
        minimumBestPerformanceValueSlider.addChangeListener((ChangeEvent e) -> {
            // TODO add your handling code here:
            if(!fieldIsMain){
                sliderIsMain = true;
                double value = Double.valueOf(minimumBestPerformanceValueSlider.getValue())/100;
                minimumBestPerformanceValueLabel.setText(String.format(Locale.ENGLISH, "%4.2f", value)); 
                sliderIsMain = false;
            }
        });
        minimumBestPerformanceValueLabel.addActionListener((ActionEvent ae) -> {
            if(!sliderIsMain){
                fieldIsMain=true;
                _controlValueChanged(minimumBestPerformanceValueLabel, 
                        minimumBestPerformanceValueSlider,
                        minimumBestPerformanceValueSlider.getMinimum(),
                        minimumBestPerformanceValueSlider.getMaximum(), 
                        true, 100);
                fieldIsMain=false;
            }
        });
        minimumAveragePerformaceValueSlider.addChangeListener((ChangeEvent e) -> {
            // TODO add your handling code here:
            if(!fieldIsMain){
                sliderIsMain = true;
                double value = Double.valueOf(minimumAveragePerformaceValueSlider.getValue())/100;
                minimumAveragePerformaceValueLabel.setText(String.format(Locale.ENGLISH, "%4.2f", value)); 
                sliderIsMain = false;
            }
        });
        minimumAveragePerformaceValueLabel.addActionListener((ActionEvent ae) -> {
            if(!sliderIsMain){
                fieldIsMain=true;
                _controlValueChanged(minimumAveragePerformaceValueLabel, 
                        minimumAveragePerformaceValueSlider,
                        minimumAveragePerformaceValueSlider.getMinimum(),
                        minimumAveragePerformaceValueSlider.getMaximum(),
                        true, 100);
                fieldIsMain=false;
            }
        });
        maximumEvolutionaryCyclesValueSlider.addChangeListener((ChangeEvent e) -> {
            // TODO add your handling code here:
            if(!fieldIsMain){
                sliderIsMain = true;
                int value = maximumEvolutionaryCyclesValueSlider.getValue();
                maximumEvolutionaryCyclesValueLabel.setText(String.format("%4d", value)); 
                sliderIsMain = false;
            }
        });
        maximumEvolutionaryCyclesValueLabel.addActionListener((ActionEvent ae) -> {
            if(!sliderIsMain){
                fieldIsMain=true;
                _controlValueChanged(maximumEvolutionaryCyclesValueLabel, 
                        maximumEvolutionaryCyclesValueSlider,
                        maximumEvolutionaryCyclesValueSlider.getMinimum(),
                        maximumEvolutionaryCyclesValueSlider.getMaximum(),
                        true);
                fieldIsMain=false;
            }
        });
//        optimizationMethodUsedComboBox.addActionListener((ActionEvent ae)->{
//            if(optimizationMethodUsedComboBox.getSelectedIndex()==0){
//                //usePerformanceAsVitalAdvantgeCheck.setSelected(true);
//                useNeuronDensityAsVitalAdvantgeCheck.setEnabled(false);
//                useCalculationEficiencyAsVitalAdvantgeCheck.setEnabled(false);
//            }else if(optimizationMethodUsedComboBox.getSelectedIndex()==1){
//                useNeuronDensityAsVitalAdvantgeCheck.setEnabled(true);
//                useCalculationEficiencyAsVitalAdvantgeCheck.setEnabled(true);
//            }
//        });
        survivalRateValueTextField.addActionListener((ActionEvent ae)->{
            _controlValueChanged(survivalRateValueTextField, 0, 100, true);
        });
        useNeuronDensityAsReproductiveAdvantgeCheck.addItemListener((ItemEvent ie) -> {
            if(ie.getStateChange()==ItemEvent.SELECTED){
                useNeuronDensityAsVitalAdvantgeCheck.setSelected(false);
            }
        });
        useNeuronDensityAsVitalAdvantgeCheck.addItemListener((ItemEvent ie) -> {
            if(ie.getStateChange()==ItemEvent.SELECTED){
                useNeuronDensityAsReproductiveAdvantgeCheck.setSelected(false);
            }
        });
        useCalculationEficiencyAsReproductiveAdvantgeCheck.addItemListener((ItemEvent ie) -> {
            if(ie.getStateChange()==ItemEvent.SELECTED){
                useCalculationEficiencyAsVitalAdvantgeCheck.setSelected(false);
            }
        });
        useCalculationEficiencyAsVitalAdvantgeCheck.addItemListener((ItemEvent ie) -> {
            if(ie.getStateChange()==ItemEvent.SELECTED){
                useCalculationEficiencyAsReproductiveAdvantgeCheck.setSelected(false);
            }
        });
        ttVerificationProcessConfiguration = new TrueTableVerificationPocessConfiguration(PositionType.FIXED, this);
        eetVerificationProcessConfiguration = new EventEnvironmentVerificationProcessConfiguration();
        DefaultListModel<VerificationProcessConfiguration<? extends AbstractDataAndEditorBuilder<? extends Object>>> m = new DefaultListModel<>(){};
        verificationProcessList.setModel(m);
        m.addElement(ttVerificationProcessConfiguration);
        m.addElement(eetVerificationProcessConfiguration);
        
        verificationProcessList.getSelectionModel().addListSelectionListener((ListSelectionEvent lse) -> {
            if(!lse.getValueIsAdjusting()){
                int selected = verificationProcessList.getSelectedIndex();
                verificationProcessList.getModel().getElementAt(selected).getEditor().buildNodeEditor(verificationEditorPane);
                this.repaint();
            }
        });
        
        hasIntermediateNeuronsCheck.addChangeListener((ChangeEvent ce) -> {
            initialNeuronSizeLabel.setEnabled(hasIntermediateNeuronsCheck.isSelected());
            initialNeuronSizeField.setEnabled(hasIntermediateNeuronsCheck.isSelected());
        });
        for(InputOutputContributionValues v: InputOutputContributionValues.values()){
            inputContributionCombo.addItem(v);
            outputContributionCombo.addItem(v);
        }
        for(NeuronTypesForStabilityCheckingValues v: NeuronTypesForStabilityCheckingValues.values()){
            neuronsForStabilityCheckingCombo.addItem(v);
        }
        
        inputContributionCombo.addActionListener((ActionEvent ae) -> {
            boolean v = ((InputOutputContributionValues)inputContributionCombo.getSelectedItem()).getId().equals(InputOutputContributionValues.SEPARATED_CONTRIBUTION.getId());
            this.inputReceiverNeuronsSizeField.setEnabled(!v);
            this.inputReceiverNeuronsSizeField.setEditable(!v);
            this.inputContributionrobabilityField.setEnabled(!v);
            this.inputContributionrobabilityField.setEditable(!v);
            this.receiverNeuronNumberMutationRateField.setEnabled(!v);
            this.receiverNeuronNumberMutationRateField.setEditable(!v);
        });
        outputContributionCombo.addActionListener((ActionEvent ae) -> {
            boolean v = ((InputOutputContributionValues)outputContributionCombo.getSelectedItem()).getId().equals(InputOutputContributionValues.SEPARATED_CONTRIBUTION.getId());
            this.outputResponseNeuronsSizeField.setEnabled(!v);
            this.outputResponseNeuronsSizeField.setEditable(!v);
            this.outputContributionProbabilityField.setEnabled(!v);
            this.outputContributionProbabilityField.setEditable(!v);
            this.responseNeuronNumberMutationRateField.setEnabled(!v);
            this.responseNeuronNumberMutationRateField.setEditable(!v);
            
        });
        List<ActivationFunctionItems> l = getActivationFunctionList();
        for(ActivationFunctionItems f: l){
            activationFunctionCombo.addItem(f);
        }
//        menuEvents = new SystemMenuEvents(this);        
    }
    
    private void _controlValueChanged(JTextField field, double min, double max, boolean alert){
        _controlValueChanged(field, min, max, alert, 1);
    }
    
    private void _controlValueChanged(JTextField field, double min, double max, boolean alert, int factor){
        boolean ok = false;
        try{
            int value = (int) (Double.parseDouble(field.getText())*factor);
            if(value>=min && value<=max){
                ok=true;
            }
        }catch(NumberFormatException ex){}
        if(alert && !ok){
            JOptionPane.showMessageDialog(rootPane, String.format("Value must be a decimal value and must be compressed between %7.2f and %7.2f", min/factor, max/factor), "ALERT!", JOptionPane.ERROR_MESSAGE);
        }
    }
    
    private void _controlValueChanged(JTextField field, JSlider slider, double min, double max, boolean alert){
        _controlValueChanged(field, slider, min, max, alert, 1);
    }
    
    private void _controlValueChanged(JTextField field, JSlider slider, double min, double max, boolean alert, int factor){
        boolean ok = false;
        try{
            int value = (int) (Double.parseDouble(field.getText())*factor);
            if(value>=min && value<=max){
                slider.setValue(value);
                ok=true;
            }
        }catch(NumberFormatException ex){}
        if(alert && !ok){
            JOptionPane.showMessageDialog(rootPane, String.format("Value must be a decimal value and must be compressed between %7.2f and %7.2f", min/factor, max/factor), "ALERT!", JOptionPane.ERROR_MESSAGE);
        }
    }
    
    public static ActivationFunction getActivationFunctionInstanceFromList(String id){
        ActivationFunction ret=null;
        List<ActivationFunctionItems> annotatedClasses = getActivationFunctionList();
        int i=annotatedClasses.size()-1;
        while(i>=0 && !annotatedClasses.get(i).getId().equals(id)){
            i--;
        }
        if(i>=0){
            ret = (ActivationFunction) annotatedClasses.get(i).getInstance();
        }
        return ret;            
    }
    
    private static List<ActivationFunctionItems> getActivationFunctionList(){
        return (List<ActivationFunctionItems>) ActivationFunctionItems.getItemsList(
                "org.elsquatrecaps.rsjcb.netvolution.neuralnetwork.actfunctions", ActivationFunction.class);
    }
    
    public void updateGuiWithConfigData(){
        JsonNode partialData;
        partialData = this.getJsonConfigData().get("evolutionarySystem").get("stopEvolutionProcessOn");
        this.minimumBestPerformanceValueLabel.setText(partialData.get("minimumBestPerformance").asText());
        this.minimumBestPerformanceValueSlider.setValue((int) (partialData.get("minimumBestPerformance").asDouble()*100));
        this.minimumAveragePerformaceValueLabel.setText(partialData.get("minimumAveragePerformance").asText());
        this.minimumAveragePerformaceValueSlider.setValue((int) (partialData.get("minimumAveragePerformance").asDouble()*100));
        int v = partialData.get("maximumCyclesToProcess").asInt();
        maximumCyclesToProcessFactorComboBox.setSelectedItem(FactorModelMinimumCyclesToProcess.FOR_ONE);
        if(v>=FactorModelMinimumCyclesToProcess.FOR_THOUSAND.getValue()){
            v = partialData.get("maximumCyclesToProcess").asInt()/FactorModelMinimumCyclesToProcess.FOR_THOUSAND.getValue();
            maximumCyclesToProcessFactorComboBox.setSelectedItem(FactorModelMinimumCyclesToProcess.FOR_THOUSAND);
//        }else if(v>=FactorModelMinimumCyclesToProcess.FOR_HUNDRED.getValue()){
//            v = partialData.get("maximumCyclesToProcess").asInt()/FactorModelMinimumCyclesToProcess.FOR_HUNDRED.getValue();
//            maximumCyclesToProcessFactorComboBox.setSelectedItem(FactorModelMinimumCyclesToProcess.FOR_HUNDRED);
//        }else if(v>=FactorModelMinimumCyclesToProcess.FOR_TEN.getValue()){
//            v = partialData.get("maximumCyclesToProcess").asInt()/FactorModelMinimumCyclesToProcess.FOR_TEN.getValue();
//            maximumCyclesToProcessFactorComboBox.setSelectedItem(FactorModelMinimumCyclesToProcess.FOR_TEN);
        }
        this.maximumEvolutionaryCyclesValueLabel.setText(String.valueOf((int)v));
        this.maximumEvolutionaryCyclesValueSlider.setValue(v);
        partialData = this.getJsonConfigData().get("evolutionarySystem").get("evolutionProcessConditions");
        this.optimizationMethodUsedComboBox.setSelectedIndex(partialData.get("optimizationMethodUsed").asInt(0));
        this.survivalRateValueTextField.setText(String.valueOf(partialData.get("survivalRateValue").asInt()));
        this.usePerformanceAsVitalAdvantgeCheck.setSelected(true);
        this.usePerformanceAsReproductiveAdvantgeCheck.setSelected(true);
        this.useNeuronDensityAsVitalAdvantgeCheck.setSelected(partialData.get("vitalAdvantages").get("neuronConnectionDensityComp").asBoolean());
        this.useCalculationEficiencyAsVitalAdvantgeCheck.setSelected(partialData.get("vitalAdvantages").get("calculationEficiency").asBoolean());
        this.useNeuronDensityAsReproductiveAdvantgeCheck.setSelected(partialData.get("reproductiveAdvantages").get("neuronConnectionDensityComp").asBoolean());
        this.useCalculationEficiencyAsReproductiveAdvantgeCheck.setSelected(partialData.get("reproductiveAdvantages").get("calculationEficiency").asBoolean());
        partialData = this.getJsonConfigData().get("evolutionarySystem").get("propertiesToFollow");
        this.followPerformanceAdvantgeCheck.setSelected(true);
        this.followNeuronDensityAdvantgeCheck.setSelected(partialData.get("neuronConnectionDensity").asBoolean());
        this.followCalculationEficiencyCheck.setSelected(partialData.get("calculationEficiency").asBoolean());
        this.followAverageBetaValueCheck.setSelected(partialData.get("linearityDegree").asBoolean());
        partialData = this.getJsonConfigData().get("evolutionarySystem").get("optionalDataToRecording").get("lineage");        
        this.lineageRecordingCheckBox.setSelected(partialData.get("recording").asBoolean());
        this.numberOfBestProgenyLinesToSaveTextField.setText(String.valueOf(partialData.get("numberOfBestProgenyLinesToSave").asInt()));
        this.numberOfWorstProgenyLinesToSaveTextField.setText(String.valueOf(partialData.get("numberOfWorstProgenyLinesToSave").asInt()));
//        this.defaultFilenameToSaveProgenyLinesTextField.setText(partialData.get("defaultFileName").asText());
        partialData = this.getJsonConfigData().get("evolutionarySystem").get("evolutionEnvironment");
        List<Identifiable<String>> l = new ArrayList<>();
        for(int i=0; i<verificationProcessList.getModel().getSize(); i++){
            VerificationProcessConfiguration veri = verificationProcessList.getModel().getElementAt(i);
            veri.getEditor().updateDataStructureFromJson(partialData.get("configEditors").get(veri.getId()));
            l.add(veri);
        }
        
        int selectedIndex = indexOfLisFromId(partialData.get("verificationProcess").asText(), l);
        this.verificationProcessList.getSelectionModel().setSelectionInterval(selectedIndex, selectedIndex);
        this.activationFunctionSelected = (ActivationFunctionItems)this.activationFunctionCombo.getSelectedItem();
        partialData = this.getJsonConfigData().get("AnnBuilding");
        this.inputSizeField.setText(String.valueOf(partialData.get("numberOfInputs").asInt()));
        this.outputSizeField.setText(String.valueOf(partialData.get("numberOfOutputs").asInt()));
        this.inputReceiverNeuronsSizeField.setText(String.valueOf(partialData.get("numberOfReceivingNeurons").asInt()));
        this.outputResponseNeuronsSizeField.setText(String.valueOf(partialData.get("numberOfResponseNeurons").asInt()));
        this.hasIntermediateNeuronsCheck.setSelected(partialData.get("hasIntermediateNeurons").asBoolean());
        this.initialNeuronSizeField.setText(String.valueOf(partialData.get("initialNumberOfNeurons").asInt()));
        this.neuronSizeField.setText(String.valueOf(partialData.get("maxNumberOfNeurons").asInt()));
        this.inputContributionCombo.setSelectedIndex(indexOfLisFromId(partialData.get("TypeOfContributionInputs").asText(), InputOutputContributionValues.values()));
        this.outputContributionCombo.setSelectedIndex(indexOfLisFromId(partialData.get("TypeOfContributionOutputs").asText(), InputOutputContributionValues.values()));
        this.initialMinWeightField.setText(String.valueOf(partialData.get("initialMinumumWeight").asDouble()));
        this.initialMaxWeightField.setText(String.valueOf(partialData.get("initialMaximumWeight").asDouble()));
        this.activationFunctionCombo.setSelectedIndex(indexOfLisFromId(partialData.get("typeOfActivationFunction").asText(), getActivationFunctionList()));
        this.loopingTimesToStabilityCheckField.setText(String.valueOf(partialData.get("numberOfEqualValuesToCheckStability").asInt()));
        this.equalityIntervalToStabilityCheckField.setText(String.valueOf(partialData.get("equalityRangeToCompareValues").asInt()));
        this.neuronsForStabilityCheckingCombo.setSelectedIndex(indexOfLisFromId(partialData.get("neuronsUsedToCheckStability").asText(), NeuronTypesForStabilityCheckingValues.values()));
        this.maxLoopsForResultsField.setText(String.valueOf(partialData.get("maximumLoopsTogetResults").asInt()));
        this.connectionProbabilityForwardInterNeuronField.setText(String.valueOf(partialData.get("forwardConnectionPercent").asInt()));
        this.connectionProbabilityBackwardInterNeuronField.setText(String.valueOf(partialData.get("backwardConnectionPercent").asInt()));
        this.inputContributionrobabilityField.setText(String.valueOf(partialData.get("inputContributionPercent").asInt()));
        this.outputContributionProbabilityField.setText(String.valueOf(partialData.get("outputContributionPercent").asInt()));
        this.populationSizeField.setText(String.valueOf(partialData.get("populationSize").asInt()));
        partialData = this.getJsonConfigData().get("AnnMutation");
        this.thresholdMutationRateField.setText(String.valueOf(partialData.get("linearityChangingRate").asDouble()));
        this.maxThresholdExchangeFactorValueField.setText(String.valueOf(partialData.get("linearityMaxIncrement").asDouble()));
        this.weightsMutationRateField.setText(String.valueOf(partialData.get("weightChangingRate").asDouble()));
        this.maxWeightExchangevalueField.setText(String.valueOf(partialData.get("weightMaxIncrement").asDouble()));
        this.connectionMutationRateField.setText(String.valueOf(partialData.get("connectionRate").asDouble()));
        this.disconnectionMutationRateField.setText(String.valueOf(partialData.get("disconnectionRate").asDouble()));
        this.receiverNeuronNumberMutationRateField.setText(String.valueOf(partialData.get("contributionInputRate").asDouble()));
        this.responseNeuronNumberMutationRateField.setText(String.valueOf(partialData.get("contributionOutpuRate").asDouble()));
    }    

    public ActivationFunction getActivationFunctionInstanceSelected(){
        return (ActivationFunction) this.activationFunctionSelected.getInstance();
    }

    public Class<ActivationFunction> getActivationFunctionClassSelected(){
        return this.activationFunctionSelected.getType();
    }
    
    public void updateConfigWithGuiData(){
        ObjectNode partialData;
        partialData = (ObjectNode) this.getJsonConfigData().get("evolutionarySystem").get("stopEvolutionProcessOn");
        partialData.put("minimumBestPerformance", ((double)this.minimumBestPerformanceValueSlider.getValue())/100);
        partialData.put("minimumAveragePerformance", ((double)this.minimumAveragePerformaceValueSlider.getValue())/100);
        int v = this.maximumEvolutionaryCyclesValueSlider.getValue()*this.maximumCyclesToProcessFactorComboBox.getModel().getElementAt(this.maximumCyclesToProcessFactorComboBox.getSelectedIndex()).getValue();
        partialData.put("maximumCyclesToProcess", v);
        partialData = (ObjectNode) this.getJsonConfigData().get("evolutionarySystem").get("evolutionProcessConditions");
        partialData.put("optimizationMethodUsed", optimizationMethodUsedComboBox.getSelectedIndex());
        partialData.put("survivalRateValue", Integer.valueOf(survivalRateValueTextField.getText()));
        partialData = (ObjectNode) this.getJsonConfigData().get("evolutionarySystem").get("evolutionProcessConditions").get("vitalAdvantages");
        partialData.put("neuronConnectionDensityComp", Boolean.valueOf(this.useNeuronDensityAsVitalAdvantgeCheck.isSelected()));
        partialData.put("calculationEficiency", Boolean.valueOf(this.useCalculationEficiencyAsVitalAdvantgeCheck.isSelected()));
        partialData = (ObjectNode) this.getJsonConfigData().get("evolutionarySystem").get("evolutionProcessConditions").get("reproductiveAdvantages");
        partialData.put("neuronConnectionDensityComp", Boolean.valueOf(this.useNeuronDensityAsReproductiveAdvantgeCheck.isSelected()));
        partialData.put("calculationEficiency", Boolean.valueOf(this.useCalculationEficiencyAsReproductiveAdvantgeCheck.isSelected()));
        partialData = (ObjectNode) this.getJsonConfigData().get("evolutionarySystem").get("propertiesToFollow");
        partialData.put("neuronConnectionDensity", Boolean.valueOf(this.followNeuronDensityAdvantgeCheck.isSelected()));
        partialData.put("calculationEficiency", Boolean.valueOf(this.followCalculationEficiencyCheck.isSelected()));
        partialData.put("linearityDegree", Boolean.valueOf(this.followAverageBetaValueCheck.isSelected()));
        partialData = (ObjectNode) this.getJsonConfigData().get("evolutionarySystem").get("optionalDataToRecording").get("lineage");
        partialData.put("recording", this.lineageRecordingCheckBox.isSelected());
        partialData.put("numberOfBestProgenyLinesToSave", Integer.valueOf(this.numberOfBestProgenyLinesToSaveTextField.getText()));
        partialData.put("numberOfWorstProgenyLinesToSave", Integer.valueOf(this.numberOfWorstProgenyLinesToSaveTextField.getText()));
//        partialData.put("defaultFileName", this.defaultFilenameToSaveProgenyLinesTextField.getText());
        partialData = (ObjectNode) this.getJsonConfigData().get("evolutionarySystem").get("evolutionEnvironment");
        partialData.put("verificationProcess", this.verificationProcessList.getSelectedValue().getId());
        partialData = (ObjectNode) partialData.get("configEditors");
        for(int i=0; i<verificationProcessList.getModel().getSize(); i++){
            VerificationProcessConfiguration veri = verificationProcessList.getModel().getElementAt(i);
            partialData.set(veri.getId(), veri.getEditor().getJsonFromDataStructure());
        }
        partialData = (ObjectNode) this.getJsonConfigData().get("AnnBuilding");
        partialData.put("populationSize", Integer.valueOf(this.populationSizeField.getText()));
        partialData.put("numberOfInputs", Integer.valueOf(this.inputSizeField.getText()));
        partialData.put("numberOfOutputs", Integer.valueOf(this.outputSizeField.getText()));
        partialData.put("numberOfReceivingNeurons", Integer.valueOf(this.inputReceiverNeuronsSizeField.getText()));
        partialData.put("numberOfResponseNeurons", Integer.valueOf(this.outputResponseNeuronsSizeField.getText()));
        partialData.put("hasIntermediateNeurons", Boolean.valueOf(this.hasIntermediateNeuronsCheck.isSelected()));
        partialData.put("initialNumberOfNeurons", Integer.valueOf(this.initialNeuronSizeField.getText()));
        partialData.put("maxNumberOfNeurons", Integer.valueOf(this.neuronSizeField.getText()));
        partialData.put("TypeOfContributionInputs", ((InputOutputContributionValues)this.inputContributionCombo.getSelectedItem()).getId());
        partialData.put("TypeOfContributionOutputs", ((InputOutputContributionValues)this.outputContributionCombo.getSelectedItem()).getId());
        partialData.put("initialMinumumWeight",  Double.valueOf(this.initialMinWeightField.getText()));
        partialData.put("initialMaximumWeight", Double.valueOf(this.initialMaxWeightField.getText()));
        this.activationFunctionSelected = (ActivationFunctionItems)this.activationFunctionCombo.getSelectedItem();
        partialData.put("typeOfActivationFunction", activationFunctionSelected.getId());
        partialData.put("numberOfEqualValuesToCheckStability", Integer.valueOf(this.loopingTimesToStabilityCheckField.getText()));
        partialData.put("equalityRangeToCompareValues", Integer.valueOf(this.equalityIntervalToStabilityCheckField.getText()));
        partialData.put("neuronsUsedToCheckStability", ((NeuronTypesForStabilityCheckingValues)this.neuronsForStabilityCheckingCombo.getSelectedItem()).getId());
        partialData.put("maximumLoopsTogetResults", Integer.valueOf(this.maxLoopsForResultsField.getText()));
        partialData.put("forwardConnectionPercent", Integer.valueOf(this.connectionProbabilityForwardInterNeuronField.getText()));
        partialData.put("backwardConnectionPercent", Integer.valueOf(this.connectionProbabilityBackwardInterNeuronField.getText()));
        partialData.put("inputContributionPercent", Integer.valueOf(this.inputContributionrobabilityField.getText()));
        partialData.put("outputContributionPercent", Integer.valueOf(this.outputContributionProbabilityField.getText()));
        partialData = (ObjectNode) this.getJsonConfigData().get("AnnMutation");
        partialData.put("linearityChangingRate", Double.valueOf(this.thresholdMutationRateField.getText()));
        partialData.put("linearityMaxIncrement", Double.valueOf(this.maxThresholdExchangeFactorValueField.getText()));
        partialData.put("weightChangingRate", Double.valueOf(this.weightsMutationRateField.getText()));
        partialData.put("weightMaxIncrement", Double.valueOf(this.maxWeightExchangevalueField.getText()));
        partialData.put("connectionRate", Double.valueOf(this.connectionMutationRateField.getText()));
        partialData.put("disconnectionRate", Double.valueOf(this.disconnectionMutationRateField.getText()));
        partialData.put("contributionInputRate", Double.valueOf(this.receiverNeuronNumberMutationRateField.getText()));
        partialData.put("contributionOutpuRate", Double.valueOf(this.responseNeuronNumberMutationRateField.getText()));
    }
    

    /**
     * @return the activationFunctionSelected
     */
    public ActivationFunctionItems getActivationFunctionSelected() {
        return activationFunctionSelected;
    }

    /**
     * @param activationFunctionSelected the activationFunctionSelected to set
     */
    public void setActivationFunctionSelected(ActivationFunctionItems activationFunctionSelected) {
        this.activationFunctionSelected = activationFunctionSelected;
    }
    
    private int indexOfLisFromId(String id, List<? extends Identifiable<String>> list){
        int ret=0;
        while(ret<list.size() && !list.get(ret).getId().equals(id)){
            ret++;
        }
        return ret;
    }    

    private int indexOfLisFromId(String id, Identifiable<String>[] list){
        int ret=0;
        while(ret<list.length && !list[ret].getId().equals(id)){
            ret++;
        }
        return ret;
    }    
    
//    public static String getStDefaultFileNameConfig(){
//        return "config/default_cfg.json";
//    }

    @Override
    public void updateData() {
        updateGuiWithConfigData();
        updateViewForControls();
    }
    
    private void updateViewForControls(){
        newConfigurationJMenuItem.setEnabled(true);

        openMenuItem.setEnabled(true);
        openConfigButton.setEnabled(true);

        saveMenuItem.setEnabled(true);
        saveAsMenuItem.setEnabled(true);
        saveConfigButton.setEnabled(true);
        saveAsDefaultMenutem.setEnabled(true);

        saveEvolutionMenuItem.setEnabled(false);
        saveEvolveDataButton.setEnabled(false);
        
        loadEvolutionMenuItem.setEnabled(true);
        loadEvolveDataButton.setEnabled(true);
        loadAgentDetailsButton.setEnabled(true);
        
        exitMenuItem.setEnabled(true);
        
//        boolean enabledRun = !this.getEvolutionFrames().containsKey(CntFrames.EVOLUTION_PROCESS);       
//        runEvolveProcessMenuItem.setEnabled(enabledRun);
//        runButton.setEnabled(enabledRun);
        runEvolveProcessMenuItem.setEnabled(true);
        runButton.setEnabled(true);
        
        stopEvolveProcessMenuItem.setEnabled(false);
        cancelEvolveProcessMenuItem.setEnabled(false);
        
        viewConfigMenuItem.setEnabled(false);

        viewEvolveDataButton.setEnabled(this.getEvolutionFrames().containsKey(CntFrames.EVOLUTION_PROCESS)||this.getEvolutionFrames().containsKey(CntFrames.POPULATION_DETAIL));
        viewEvolutionGraphicMenuItem.setEnabled(viewEvolveDataButton.isEnabled());

        viewAgentDetailsButton.setEnabled(this.getEvolutionFrames().containsKey(CntFrames.EVOLUTION_PROCESS)||this.getEvolutionFrames().containsKey(CntFrames.POPULATION_DETAIL));
        viewPopuplationDetailMenuItem.setEnabled(viewAgentDetailsButton.isEnabled());
    }    
    
    private static enum FactorModelMinimumCyclesToProcess{
        FOR_THOUSAND("X 1000", 1000),
        FOR_HUNDRED(" X 100", 100),
        FOR_TEN("  X 10", 10),
        FOR_ONE("   X 1", 1);
        
        String name;
        int value;
        
//        private static final HashMap<String, FactorModelMinimumCyclesToProcess> nameMap = new HashMap<>();
//        static {
//            nameMap.put("X 1000", FOR_THOUSAND);
//            nameMap.put(" X 100", FOR_HUNDRED);
//            nameMap.put("  X 10", FOR_TEN);
//            nameMap.put("   X 1", FOR_ONE);
//        }

        private FactorModelMinimumCyclesToProcess(String name, int value){
            this.name = name;
            this.value = value;
        }
        
        @Override
        public String toString() {
            return this.name;
        }

        public String getName(){
            return this.name;
        }

        public int getValue(){
            return this.value;
        }

//        public static String fromName(String v){
//            return nameMap.get(v);
//        }
    }

}
